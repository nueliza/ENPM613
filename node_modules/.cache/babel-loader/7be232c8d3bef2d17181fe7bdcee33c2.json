{"ast":null,"code":"/**\n * Contains service handlers for all user account actions\n */\nimport * as actionTypes from \"./actionTypes\";\nimport axios from \"axios\"; // axios.defaults.baseURL = 'https://api.example.com';\n// axios.defaults.headers.common['Accept'] = 'application/json';\n// axios.defaults.headers.post['Content-Type'] = 'application/json';\n// axios.defaults.withCredentials = true;\n\nconst baseUrl = \"https://get-sat-pro.herokuapp.com/api\";\n/**\n * loginUser communicates with the login API, and logs in the user. Also stores the JWT token in the local storage\n * @param {Object} user \n */\n\nexport function loginUser(user) {\n  return async dispatch => {\n    dispatch({\n      type: actionTypes.LOGIN_USER_STARTED\n    });\n    return axios.post(\"\".concat(baseUrl, \"/login\"), {\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      },\n      body: user\n    }) //.then(response => response.json())\n    .then(payload => {\n      if (payload.Status === 200) {\n        //cookies.set(\"token\", payload.token);\n        localStorage.setItem(\"token\", payload.token);\n        dispatch({\n          type: actionTypes.LOGIN_USER_SUCESS,\n          payload: payload\n        });\n      } else {\n        dispatch({\n          type: actionTypes.LOGIN_USER_FAILED,\n          error: payload.message\n        });\n      }\n    });\n  };\n}\n/**\n * registerUser communicated with registerUser API, registers the user. \n * @param {Object} registerData \n */\n\nexport function registerUser(registerData) {\n  return async dispatch => {\n    dispatch({\n      type: actionTypes.REGISTERATION_STARTED\n    }); //TODO service call for register\n\n    const resp = await fetch(\"\".concat(baseUrl, \"/register\"), {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      },\n      body: JSON.stringify(registerData)\n    });\n    const payload = await resp.json();\n\n    if (payload.Status === 200) {\n      dispatch({\n        type: actionTypes.REGISTRATION_SUCCESS,\n        payload: payload.message\n      });\n    } else {\n      dispatch({\n        type: actionTypes.REGISTRATION_FAILED,\n        error: payload.message\n      });\n    }\n  };\n}\n/**\n * logoutUser communicates with the logout API and removes the JWT token from the local storage\n */\n\nexport function logoutUser() {\n  return async dispatch => {\n    dispatch({\n      type: actionTypes.LOGOUT_USER_STARTED\n    });\n    return fetch(\"\".concat(baseUrl, \"/logout\"), {\n      method: \"GET\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      }\n    }).then(response => response.json()).then(payload => {\n      if (payload.Status === 200) {\n        localStorage.removeItem(\"token\", payload.token);\n        dispatch({\n          type: actionTypes.LOGOUT_USER_SUCESS,\n          payload: payload.message\n        });\n      } else {\n        dispatch({\n          type: actionTypes.LOGOUT_USER_FAILED,\n          error: payload.message\n        });\n      }\n    });\n  };\n}\nexport function getModulesList(reqObject) {\n  console.log(\"HERE\", reqObject);\n  return async dispatch => {\n    dispatch({\n      type: actionTypes.GET_MODULE_LIST_STARTED\n    });\n    return fetch(\"\".concat(baseUrl, \"/get_modules\"), {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': \"Bearer \".concat(localStorage.getItem(\"token\"))\n      },\n      body: JSON.stringify(reqObject)\n    }).then(response => response.json()).then(payload => {\n      console.log(\"HERE\");\n\n      if (payload.Status === 200) {\n        dispatch({\n          type: actionTypes.GET_MODULE_LIST_SUCCESS,\n          payload: payload\n        });\n      } else {\n        dispatch({\n          type: actionTypes.GET_MODULE_LIST_FAILED,\n          error: payload.message\n        });\n      }\n    });\n  };\n}","map":{"version":3,"sources":["/Users/annuabraham/Documents/GitHub/ENPM613/client/src/actions/userHandler.js"],"names":["actionTypes","axios","baseUrl","loginUser","user","dispatch","type","LOGIN_USER_STARTED","post","headers","body","then","payload","Status","localStorage","setItem","token","LOGIN_USER_SUCESS","LOGIN_USER_FAILED","error","message","registerUser","registerData","REGISTERATION_STARTED","resp","fetch","method","JSON","stringify","json","REGISTRATION_SUCCESS","REGISTRATION_FAILED","logoutUser","LOGOUT_USER_STARTED","response","removeItem","LOGOUT_USER_SUCESS","LOGOUT_USER_FAILED","getModulesList","reqObject","console","log","GET_MODULE_LIST_STARTED","getItem","GET_MODULE_LIST_SUCCESS","GET_MODULE_LIST_FAILED"],"mappings":"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","sourcesContent":["/**\n * Contains service handlers for all user account actions\n */\n\nimport * as actionTypes from \"./actionTypes\";\nimport axios from \"axios\";\n\n// axios.defaults.baseURL = 'https://api.example.com';\n// axios.defaults.headers.common['Accept'] = 'application/json';\n// axios.defaults.headers.post['Content-Type'] = 'application/json';\n// axios.defaults.withCredentials = true;\n\nconst baseUrl = \"https://get-sat-pro.herokuapp.com/api\";\n\n/**\n * loginUser communicates with the login API, and logs in the user. Also stores the JWT token in the local storage\n * @param {Object} user \n */\nexport function loginUser(user) {\n    return async dispatch => {\n        dispatch({\n            type: actionTypes.LOGIN_USER_STARTED\n        });\n        return axios.post(`${baseUrl}/login`,{\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json',\n            },\n            body: user\n        })\n        //.then(response => response.json())\n        .then(payload => {\n            if (payload.Status === 200) {\n                //cookies.set(\"token\", payload.token);\n                localStorage.setItem(\"token\", payload.token);\n                dispatch({\n                    type: actionTypes.LOGIN_USER_SUCESS,\n                    payload: payload\n                });\n            }\n            else {\n                dispatch({\n                    type: actionTypes.LOGIN_USER_FAILED,\n                    error: payload.message\n                });\n            }\n        })\n    }\n  }\n\n/**\n * registerUser communicated with registerUser API, registers the user. \n * @param {Object} registerData \n */\nexport function registerUser(registerData) {\n    return async dispatch =>{\n        dispatch({\n            type: actionTypes.REGISTERATION_STARTED\n        });\n        //TODO service call for register\n        const resp = await fetch(`${baseUrl}/register`, {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            },\n            body: JSON.stringify(registerData)\n        });\n        const payload = await resp.json();\n        if (payload.Status === 200) {\n            dispatch({\n                type: actionTypes.REGISTRATION_SUCCESS,\n                payload: payload.message\n            });\n        }\n        else {\n            dispatch({\n                type: actionTypes.REGISTRATION_FAILED,\n                error: payload.message\n            });\n        }\n    }\n    \n}\n/**\n * logoutUser communicates with the logout API and removes the JWT token from the local storage\n */\nexport function logoutUser() {\n    return async dispatch => {\n        dispatch({\n            type: actionTypes.LOGOUT_USER_STARTED\n        });\n        return fetch(`${baseUrl}/logout`,{\n            method: \"GET\",\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json',\n            },\n        })\n        .then(response => response.json())\n        .then(payload => {\n            if (payload.Status === 200) {\n                localStorage.removeItem(\"token\", payload.token);\n                dispatch({\n                    type: actionTypes.LOGOUT_USER_SUCESS,\n                    payload: payload.message\n                });\n            }\n            else {\n                dispatch({\n                    type: actionTypes.LOGOUT_USER_FAILED,\n                    error: payload.message\n                });\n            }\n        })\n    }\n  }\n\n  export function getModulesList(reqObject) {\n      console.log(\"HERE\", reqObject)\n    return async dispatch => {\n        dispatch({\n            type: actionTypes.GET_MODULE_LIST_STARTED\n        })\n        return fetch(`${baseUrl}/get_modules`,{\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json',\n                'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n            },\n            body: JSON.stringify(reqObject)\n        })\n        .then(response => response.json())\n        .then(payload => {\n            console.log(\"HERE\")\n            if (payload.Status === 200) {\n                dispatch({\n                    type: actionTypes.GET_MODULE_LIST_SUCCESS,\n                    payload: payload\n                });\n            }\n            else {\n                dispatch({\n                    type: actionTypes.GET_MODULE_LIST_FAILED,\n                    error: payload.message\n                });\n            }\n        })\n    }\n  }\n\n"]},"metadata":{},"sourceType":"module"}