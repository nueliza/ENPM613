{"ast":null,"code":"var cycle = require('./cycle');\n\nexports.stringify = function stringify(value, replacer, space, _options) {\n  if (arguments.length < 4) {\n    try {\n      if (arguments.length === 1) {\n        return JSON.stringify(value);\n      } else {\n        return JSON.stringify.apply(JSON, arguments);\n      }\n    } catch (e) {}\n  }\n\n  var options = _options || false;\n\n  if (typeof options === 'boolean') {\n    options = {\n      'date': options,\n      'function': options,\n      'regex': options,\n      'undefined': options,\n      'error': options,\n      'symbol': options,\n      'map': options,\n      'set': options,\n      'nan': options,\n      'infinity': options\n    };\n  }\n\n  var decycled = cycle.decycle(value, options, replacer);\n\n  if (arguments.length === 1) {\n    return JSON.stringify(decycled);\n  } else {\n    // decycle already handles when replacer is a function.\n    return JSON.stringify(decycled, Array.isArray(replacer) ? replacer : null, space);\n  }\n};\n\nexports.parse = function parse(text, reviver) {\n  var needsRetrocycle = /\"\\$jsan\"/.test(text);\n  var parsed;\n\n  if (arguments.length === 1) {\n    parsed = JSON.parse(text);\n  } else {\n    parsed = JSON.parse(text, reviver);\n  }\n\n  if (needsRetrocycle) {\n    parsed = cycle.retrocycle(parsed);\n  }\n\n  return parsed;\n};","map":null,"metadata":{},"sourceType":"script"}