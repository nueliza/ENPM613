{"ast":null,"code":"var helpers = require('../helpers');\n\nvar mark = helpers.mark;\nvar extract = helpers.extract;\nvar refer = helpers.refer;\n\nvar options = require('../constants/options');\n\nmodule.exports = function serialize(Immutable, refs, customReplacer, customReviver) {\n  function replacer(key, value) {\n    if (value instanceof Immutable.Record) return refer(value, 'ImmutableRecord', 'toObject', refs);\n    if (value instanceof Immutable.Range) return extract(value, 'ImmutableRange');\n    if (value instanceof Immutable.Repeat) return extract(value, 'ImmutableRepeat');\n    if (Immutable.OrderedMap.isOrderedMap(value)) return mark(value, 'ImmutableOrderedMap', 'toObject');\n    if (Immutable.Map.isMap(value)) return mark(value, 'ImmutableMap', 'toObject');\n    if (Immutable.List.isList(value)) return mark(value, 'ImmutableList', 'toArray');\n    if (Immutable.OrderedSet.isOrderedSet(value)) return mark(value, 'ImmutableOrderedSet', 'toArray');\n    if (Immutable.Set.isSet(value)) return mark(value, 'ImmutableSet', 'toArray');\n    if (Immutable.Seq.isSeq(value)) return mark(value, 'ImmutableSeq', 'toArray');\n    if (Immutable.Stack.isStack(value)) return mark(value, 'ImmutableStack', 'toArray');\n    return value;\n  }\n\n  function reviver(key, value) {\n    if (typeof value === 'object' && value !== null && '__serializedType__' in value) {\n      var data = value.data;\n\n      switch (value.__serializedType__) {\n        case 'ImmutableMap':\n          return Immutable.Map(data);\n\n        case 'ImmutableOrderedMap':\n          return Immutable.OrderedMap(data);\n\n        case 'ImmutableList':\n          return Immutable.List(data);\n\n        case 'ImmutableRange':\n          return Immutable.Range(data._start, data._end, data._step);\n\n        case 'ImmutableRepeat':\n          return Immutable.Repeat(data._value, data.size);\n\n        case 'ImmutableSet':\n          return Immutable.Set(data);\n\n        case 'ImmutableOrderedSet':\n          return Immutable.OrderedSet(data);\n\n        case 'ImmutableSeq':\n          return Immutable.Seq(data);\n\n        case 'ImmutableStack':\n          return Immutable.Stack(data);\n\n        case 'ImmutableRecord':\n          return refs && refs[value.__serializedRef__] ? new refs[value.__serializedRef__](data) : Immutable.Map(data);\n\n        default:\n          return data;\n      }\n    }\n\n    return value;\n  }\n\n  return {\n    replacer: customReplacer ? function (key, value) {\n      return customReplacer(key, value, replacer);\n    } : replacer,\n    reviver: customReviver ? function (key, value) {\n      return customReviver(key, value, reviver);\n    } : reviver,\n    options: options\n  };\n};","map":null,"metadata":{},"sourceType":"script"}