{"ast":null,"code":"/**\n * Contains all the service handlers for discussion related actions\n */\nimport * as actionTypes from \"./actionTypes\";\nimport axios from \"axios\";\naxios.defaults.baseURL = 'https://get-sat-pro.herokuapp.com/api';\naxios.defaults.headers.common['Accept'] = 'application/json';\naxios.defaults.headers.post['Content-Type'] = 'application/json';\naxios.defaults.headers.common['Authorization'] = \"Bearer \".concat(localStorage.getItem(\"token\"));\naxios.defaults.withCredentials = true;\nconst baseUrl = \"https://get-sat-pro.herokuapp.com/api\";\n/**\n * createDiscussion starts a new discussion\n * @param {Object} reqObject \n */\n\nexport function createDiscussion(reqObject) {\n  return async dispatch => {\n    dispatch({\n      type: actionTypes.CREATE_DISCUSSION_STARTED\n    });\n    return axios.post(\"/create_discussion\", reqObject).then(response => {\n      dispatch({\n        type: actionTypes.CREATE_DISCUSSION_SUCCESS,\n        payload: response.data.message\n      });\n    }).catch(error => {\n      dispatch({\n        type: actionTypes.CREATE_DICUSSION_FAILED,\n        error: error.response.data.message\n      });\n    });\n  };\n}\n/**\n * gets all the discussions in a module\n */\n\nexport function getDiscussionList() {\n  return async dispatch => {\n    dispatch({\n      type: actionTypes.GET_DISCUSSION_LIST_STARTED\n    });\n    return fetch(\"\".concat(baseUrl, \"/get_discussions/{mod_id}\"), {\n      method: \"GET\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': \"Bearer \".concat(localStorage.getItem(\"token\"))\n      }\n    }).then(response => response.json()).then(payload => {\n      if (payload.Status === 200) {\n        dispatch({\n          type: actionTypes.GET_DISCUSSION_LIST_SUCCESS,\n          payload: payload\n        });\n      } else {\n        dispatch({\n          type: actionTypes.GET_DISCUSSION_LIST_FAILED,\n          error: payload.message\n        });\n      }\n    });\n  };\n}","map":{"version":3,"sources":["/Users/annuabraham/Documents/GitHub/ENPM613/src/actions/discussionHandler.js"],"names":["actionTypes","axios","defaults","baseURL","headers","common","post","localStorage","getItem","withCredentials","baseUrl","createDiscussion","reqObject","dispatch","type","CREATE_DISCUSSION_STARTED","then","response","CREATE_DISCUSSION_SUCCESS","payload","data","message","catch","error","CREATE_DICUSSION_FAILED","getDiscussionList","GET_DISCUSSION_LIST_STARTED","fetch","method","json","Status","GET_DISCUSSION_LIST_SUCCESS","GET_DISCUSSION_LIST_FAILED"],"mappings":"AAAA;;;AAIA,OAAO,KAAKA,WAAZ,MAA6B,eAA7B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEAA,KAAK,CAACC,QAAN,CAAeC,OAAf,GAAyB,uCAAzB;AACAF,KAAK,CAACC,QAAN,CAAeE,OAAf,CAAuBC,MAAvB,CAA8B,QAA9B,IAA0C,kBAA1C;AACAJ,KAAK,CAACC,QAAN,CAAeE,OAAf,CAAuBE,IAAvB,CAA4B,cAA5B,IAA8C,kBAA9C;AACAL,KAAK,CAACC,QAAN,CAAeE,OAAf,CAAuBC,MAAvB,CAA8B,eAA9B,qBAA2DE,YAAY,CAACC,OAAb,CAAqB,OAArB,CAA3D;AACAP,KAAK,CAACC,QAAN,CAAeO,eAAf,GAAiC,IAAjC;AAEA,MAAMC,OAAO,GAAG,uCAAhB;AAEA;;;;;AAIA,OAAO,SAASC,gBAAT,CAA0BC,SAA1B,EAAqC;AACxC,SAAO,MAAMC,QAAN,IAAkB;AACrBA,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEd,WAAW,CAACe;AADb,KAAD,CAAR;AAGA,WAAOd,KAAK,CAACK,IAAN,uBAAiCM,SAAjC,EACNI,IADM,CACAC,QAAQ,IAAG;AACdJ,MAAAA,QAAQ,CAAC;AACLC,QAAAA,IAAI,EAAEd,WAAW,CAACkB,yBADb;AAELC,QAAAA,OAAO,EAAEF,QAAQ,CAACG,IAAT,CAAcC;AAFlB,OAAD,CAAR;AAIH,KANM,EAONC,KAPM,CAOCC,KAAK,IAAG;AACZV,MAAAA,QAAQ,CAAC;AACLC,QAAAA,IAAI,EAAEd,WAAW,CAACwB,uBADb;AAELD,QAAAA,KAAK,EAAEA,KAAK,CAACN,QAAN,CAAeG,IAAf,CAAoBC;AAFtB,OAAD,CAAR;AAIH,KAZM,CAAP;AAaH,GAjBD;AAkBD;AAED;;;;AAIA,OAAO,SAASI,iBAAT,GAA6B;AAClC,SAAO,MAAMZ,QAAN,IAAkB;AACrBA,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEd,WAAW,CAAC0B;AADb,KAAD,CAAR;AAGA,WAAOC,KAAK,WAAIjB,OAAJ,gCAAuC;AAC/CkB,MAAAA,MAAM,EAAE,KADuC;AAE/CxB,MAAAA,OAAO,EAAE;AACL,wBAAgB,kBADX;AAEL,kBAAU,kBAFL;AAGL,0CAA2BG,YAAY,CAACC,OAAb,CAAqB,OAArB,CAA3B;AAHK;AAFsC,KAAvC,CAAL,CAQNQ,IARM,CAQDC,QAAQ,IAAIA,QAAQ,CAACY,IAAT,EARX,EASNb,IATM,CASDG,OAAO,IAAI;AACb,UAAIA,OAAO,CAACW,MAAR,KAAmB,GAAvB,EAA4B;AACxBjB,QAAAA,QAAQ,CAAC;AACLC,UAAAA,IAAI,EAAEd,WAAW,CAAC+B,2BADb;AAELZ,UAAAA,OAAO,EAAEA;AAFJ,SAAD,CAAR;AAIH,OALD,MAMK;AACDN,QAAAA,QAAQ,CAAC;AACLC,UAAAA,IAAI,EAAEd,WAAW,CAACgC,0BADb;AAELT,UAAAA,KAAK,EAAEJ,OAAO,CAACE;AAFV,SAAD,CAAR;AAIH;AACJ,KAtBM,CAAP;AAuBH,GA3BD;AA4BD","sourcesContent":["/**\n * Contains all the service handlers for discussion related actions\n */\n\nimport * as actionTypes from \"./actionTypes\";\nimport axios from \"axios\";\n\naxios.defaults.baseURL = 'https://get-sat-pro.herokuapp.com/api';\naxios.defaults.headers.common['Accept'] = 'application/json';\naxios.defaults.headers.post['Content-Type'] = 'application/json';\naxios.defaults.headers.common['Authorization'] = `Bearer ${localStorage.getItem(\"token\")}` \naxios.defaults.withCredentials = true\n\nconst baseUrl = \"https://get-sat-pro.herokuapp.com/api\";\n\n/**\n * createDiscussion starts a new discussion\n * @param {Object} reqObject \n */\nexport function createDiscussion(reqObject) {\n    return async dispatch => {\n        dispatch({\n            type: actionTypes.CREATE_DISCUSSION_STARTED\n        });\n        return axios.post(`/create_discussion`, reqObject)\n        .then( response =>{\n            dispatch({\n                type: actionTypes.CREATE_DISCUSSION_SUCCESS,\n                payload: response.data.message\n            })\n        })\n        .catch( error =>{\n            dispatch({\n                type: actionTypes.CREATE_DICUSSION_FAILED,\n                error: error.response.data.message\n            })\n        })\n    }\n  }\n\n  /**\n   * gets all the discussions in a module\n   */\n\n  export function getDiscussionList() {\n    return async dispatch => {\n        dispatch({\n            type: actionTypes.GET_DISCUSSION_LIST_STARTED\n        });\n        return fetch(`${baseUrl}/get_discussions/{mod_id}`,{\n            method: \"GET\",\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json',\n                'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n            },\n        })\n        .then(response => response.json())\n        .then(payload => {\n            if (payload.Status === 200) {\n                dispatch({\n                    type: actionTypes.GET_DISCUSSION_LIST_SUCCESS,\n                    payload: payload\n                })\n            }\n            else {\n                dispatch({\n                    type: actionTypes.GET_DISCUSSION_LIST_FAILED,\n                    error: payload.message\n                })\n            }\n        })\n    }\n  }\n\n  "]},"metadata":{},"sourceType":"module"}