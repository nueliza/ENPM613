{"ast":null,"code":"import * as actions from \"./actions\";\nimport * as actionTypes from \"./actionTypes\";\nconst baseUrl = \"https://get-sat-pro.herokuapp.com\";\nexport function loginUser(user) {\n  return async dispatch => {\n    dispatch({\n      type: actionTypes.LOGIN_USER_STARTED\n    });\n    return fetch(\"\".concat(baseUrl, \"/login\"), {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      },\n      body: JSON.stringify(user)\n    }).then(response => response.json()).then(payload => {\n      if (payload.Status === 200) {\n        localStorage.setItem(\"token\", payload.token);\n        dispatch({\n          type: actionTypes.LOGIN_USER_SUCESS,\n          data: payload\n        });\n      } else {\n        dispatch({\n          type: actionTypes.LOGIN_USER_FAILED,\n          data: payload.message\n        });\n      }\n    });\n  };\n}\nexport function registerUser(registerData) {\n  return async dispatch => {\n    dispatch(actions.registrationStarted()); //TODO service call for register\n\n    const resp = await fetch(\"\".concat(baseUrl, \"/register\"), {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      },\n      body: JSON.stringify(registerData)\n    });\n    const payload = await resp.json();\n\n    if (payload.Status === 200) {\n      dispatch(actions.registrationSuccess(payload.message));\n    } else {\n      dispatch(actions.registrationFailed(payload.message));\n    }\n  };\n}\nexport function logoutUser(user) {\n  return async dispatch => {\n    dispatch(actions.logoutStarted());\n    return fetch(\"\".concat(baseUrl, \"/logout\"), {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      }\n    }).then(response => response.json()).then(payload => {\n      if (payload.Status === 200) {\n        localStorage.removeItem(\"token\", payload.token);\n        dispatch(actions.logoutSuccess(payload.message));\n      } else {\n        dispatch(actions.logoutFailed(payload.message));\n      }\n    });\n  };\n}\nexport const setSelectedModule = data => {\n  return {\n    type: actionTypes.SET_SELECTED_MODULE,\n    payload: data\n  };\n};","map":{"version":3,"sources":["/Users/annuabraham/Documents/GitHub/ENPM613/client/src/actions/userActions.js"],"names":["actions","actionTypes","baseUrl","loginUser","user","dispatch","type","LOGIN_USER_STARTED","fetch","method","headers","body","JSON","stringify","then","response","json","payload","Status","localStorage","setItem","token","LOGIN_USER_SUCESS","data","LOGIN_USER_FAILED","message","registerUser","registerData","registrationStarted","resp","registrationSuccess","registrationFailed","logoutUser","logoutStarted","removeItem","logoutSuccess","logoutFailed","setSelectedModule","SET_SELECTED_MODULE"],"mappings":"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","sourcesContent":["import * as actions from \"./actions\";\nimport * as actionTypes from \"./actionTypes\";\n\nconst baseUrl = \"https://get-sat-pro.herokuapp.com\";\n\nexport function loginUser(user) {\n    return async dispatch => {\n        dispatch({\n            type: actionTypes.LOGIN_USER_STARTED\n        });\n        return fetch(`${baseUrl}/login`,{\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json',\n            },\n            body: JSON.stringify(user)\n        })\n        .then(response => response.json())\n        .then(payload => {\n            if (payload.Status === 200) {\n                localStorage.setItem(\"token\", payload.token);\n                dispatch({\n                    type: actionTypes.LOGIN_USER_SUCESS,\n                    data: payload\n                });\n            }\n            else {\n                dispatch({\n                    type: actionTypes.LOGIN_USER_FAILED,\n                    data: payload.message\n                });\n            }\n        })\n    }\n  }\n\n\nexport function registerUser(registerData) {\n    return async dispatch =>{\n        dispatch(actions.registrationStarted());\n        //TODO service call for register\n        const resp = await fetch(`${baseUrl}/register`, {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            },\n            body: JSON.stringify(registerData)\n        });\n        const payload = await resp.json();\n        if (payload.Status === 200) {\n            dispatch(actions.registrationSuccess(payload.message));\n        }\n        else {\n            dispatch(actions.registrationFailed(payload.message));\n        }\n    }\n    \n}\n\nexport function logoutUser(user) {\n    return async dispatch => {\n        dispatch(actions.logoutStarted());\n        return fetch(`${baseUrl}/logout`,{\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json',\n            },\n        })\n        .then(response => response.json())\n        .then(payload => {\n            if (payload.Status === 200) {\n                localStorage.removeItem(\"token\", payload.token);\n                dispatch(actions.logoutSuccess(payload.message));\n            }\n            else {\n                dispatch(actions.logoutFailed(payload.message));\n            }\n        })\n    }\n  }\n\nexport const setSelectedModule = (data) =>{\n    return{\n        type: actionTypes.SET_SELECTED_MODULE,\n        payload: data\n    }\n\n}\n"]},"metadata":{},"sourceType":"module"}