{"ast":null,"code":"/**\n * Conatins all the service handlers for the student related actions\n */\nimport * as actionTypes from \"./actionTypes\";\nimport { student_list_response } from \"../fakeData\";\nimport axios from \"axios\";\nimport Cookies from 'universal-cookie';\nconst baseUrl = \"https://get-sat-pro.herokuapp.com/api\";\nconst cookies = new Cookies();\n/**\n * gets the list of students after communicating with the get_students API\n */\n//credentials: 'include' sends the cookie along with request. fetch by default does not inlude cookies\n// export function getStudentList() {\n//     return async dispatch => {\n//         dispatch({\n//             type: actionTypes.GET_STUDENT_LIST_STARTED\n//         });\n//         return fetch(`${baseUrl}/get_students`,{\n//             method: \"GET\",\n//             headers: {\n//                 'Content-Type': 'application/json',\n//                 'Accept': 'application/json',\n//                 'Authorization': `Bearer ${localStorage.getItem(\"token\")}`,\n//                 'session': cookies.get('session')\n//             },\n//             credentials: 'include'\n//         })\n//         .then(response => response.json())\n//         .then(payload => {\n//             if (student_list_response.Status === 200) {\n//                 dispatch({\n//                     type: actionTypes.GET_STUDENT_LIST_SUCCESS,\n//                     payload: student_list_response.students\n//                 })\n//             }\n//             else {\n//                 dispatch({\n//                     type: actionTypes.GET_STUDENT_LIST_SUCCESS,\n//                     error: student_list_response.students\n//                 })\n//             }\n//         })\n//     }\n//   }\n\nexport function loginUser(user) {\n  return async dispatch => {\n    dispatch({\n      type: actionTypes.LOGIN_USER_STARTED\n    });\n    return axios.post(\"\".concat(baseUrl, \"/login\"), user, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      }\n    }).then(result => {\n      console.log(result.data);\n      localStorage.setItem(\"token\", result.data.token);\n      dispatch({\n        type: actionTypes.LOGIN_USER_SUCESS,\n        payload: result.data\n      });\n    }).catch(error => {\n      dispatch({\n        type: actionTypes.LOGIN_USER_FAILED,\n        error: error.data.message\n      });\n    });\n  };\n}","map":{"version":3,"sources":["/Users/annuabraham/Documents/GitHub/ENPM613/client/src/actions/studentHandler.js"],"names":["actionTypes","student_list_response","axios","Cookies","baseUrl","cookies","loginUser","user","dispatch","type","LOGIN_USER_STARTED","post","headers","then","result","console","log","data","localStorage","setItem","token","LOGIN_USER_SUCESS","payload","catch","error","LOGIN_USER_FAILED","message"],"mappings":"AAAA;;;AAGA,OAAO,KAAKA,WAAZ,MAA6B,eAA7B;AACA,SAASC,qBAAT,QAAsC,aAAtC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,MAAMC,OAAO,GAAG,uCAAhB;AAEA,MAAMC,OAAO,GAAG,IAAIF,OAAJ,EAAhB;AAGA;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASG,SAAT,CAAmBC,IAAnB,EAAyB;AAC5B,SAAO,MAAMC,QAAN,IAAkB;AACrBA,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAET,WAAW,CAACU;AADb,KAAD,CAAR;AAGA,WAAOR,KAAK,CAACS,IAAN,WAAcP,OAAd,aAA+BG,IAA/B,EAAqC;AACxCK,MAAAA,OAAO,EAAE;AACL,wBAAgB,kBADX;AAEL,kBAAU;AAFL;AAD+B,KAArC,EAMNC,IANM,CAMDC,MAAM,IAAI;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAM,CAACG,IAAnB;AACAC,MAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BL,MAAM,CAACG,IAAP,CAAYG,KAA1C;AACAZ,MAAAA,QAAQ,CAAC;AACLC,QAAAA,IAAI,EAAET,WAAW,CAACqB,iBADb;AAELC,QAAAA,OAAO,EAAER,MAAM,CAACG;AAFX,OAAD,CAAR;AAIH,KAbM,EAcNM,KAdM,CAcAC,KAAK,IAAG;AACXhB,MAAAA,QAAQ,CAAC;AACLC,QAAAA,IAAI,EAAET,WAAW,CAACyB,iBADb;AAELD,QAAAA,KAAK,EAAEA,KAAK,CAACP,IAAN,CAAWS;AAFb,OAAD,CAAR;AAIH,KAnBM,CAAP;AAoBL,GAxBC;AAyBH","sourcesContent":["/**\n * Conatins all the service handlers for the student related actions\n */\nimport * as actionTypes from \"./actionTypes\";\nimport { student_list_response } from \"../fakeData\";\nimport axios from \"axios\";\nimport Cookies from 'universal-cookie';\nconst baseUrl = \"https://get-sat-pro.herokuapp.com/api\";\n\nconst cookies = new Cookies();\n\n\n/**\n * gets the list of students after communicating with the get_students API\n */\n\n//credentials: 'include' sends the cookie along with request. fetch by default does not inlude cookies\n// export function getStudentList() {\n//     return async dispatch => {\n//         dispatch({\n//             type: actionTypes.GET_STUDENT_LIST_STARTED\n//         });\n//         return fetch(`${baseUrl}/get_students`,{\n//             method: \"GET\",\n//             headers: {\n//                 'Content-Type': 'application/json',\n//                 'Accept': 'application/json',\n//                 'Authorization': `Bearer ${localStorage.getItem(\"token\")}`,\n//                 'session': cookies.get('session')\n//             },\n//             credentials: 'include'\n//         })\n//         .then(response => response.json())\n//         .then(payload => {\n//             if (student_list_response.Status === 200) {\n//                 dispatch({\n//                     type: actionTypes.GET_STUDENT_LIST_SUCCESS,\n//                     payload: student_list_response.students\n//                 })\n//             }\n//             else {\n//                 dispatch({\n//                     type: actionTypes.GET_STUDENT_LIST_SUCCESS,\n//                     error: student_list_response.students\n//                 })\n//             }\n//         })\n//     }\n//   }\n\nexport function loginUser(user) {\n    return async dispatch => {\n        dispatch({\n            type: actionTypes.LOGIN_USER_STARTED\n        });\n        return axios.post(`${baseUrl}/login`, user, {\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json',\n            }\n        })\n        .then(result => {\n            console.log(result.data);\n            localStorage.setItem(\"token\", result.data.token);\n            dispatch({\n                type: actionTypes.LOGIN_USER_SUCESS,\n                payload: result.data\n        })\n        })\n        .catch(error =>{\n            dispatch({\n                type: actionTypes.LOGIN_USER_FAILED,\n                error: error.data.message\n            });\n        })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}