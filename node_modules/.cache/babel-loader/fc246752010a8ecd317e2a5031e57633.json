{"ast":null,"code":"var _jsxFileName = \"/Users/annuabraham/Documents/GitHub/ENPM613/client/src/containers/modules.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Modules from '../components/modules';\nimport AdminDashboard from '../components/AdminDashboard';\nimport { Redirect } from 'react-router-dom';\nimport { setSelectedModule } from \"../actions/moduleActions\";\nimport { getFlashcardSets } from \"../actions/dashboardActions\";\n\nclass ModuleContainer extends Component {\n  render() {\n    if (this.props.userInfo.userType === \"Student\") {\n      return React.createElement(Modules, {\n        userInfo: this.props.userInfo,\n        setSelectedModule: this.props.setSelectedModule,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 13\n        },\n        __self: this\n      });\n    } else if (this.props.userInfo.userType === \"Tutor\") {\n      return React.createElement(Redirect, {\n        to: {\n          pathname: '/dashboard'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19\n        },\n        __self: this\n      });\n    } else {\n      return React.createElement(AdminDashboard, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      });\n    }\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  userInfo: state.user.userInfo\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setSelectedModule: modules => dispatch(setSelectedModule(modules)),\n    getFlashcardSets: payload => dispatch(getFlashcardSets(payload))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ModuleContainer);","map":{"version":3,"sources":["/Users/annuabraham/Documents/GitHub/ENPM613/client/src/containers/modules.js"],"names":["React","Component","connect","Modules","AdminDashboard","Redirect","setSelectedModule","getFlashcardSets","ModuleContainer","render","props","userInfo","userType","pathname","mapStateToProps","state","user","mapDispatchToProps","dispatch","modules","payload"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,cAAP,MAA2B,8BAA3B;AACA,SAASC,QAAT,QAAyB,kBAAzB;AAEA,SAASC,iBAAT,QAAkC,0BAAlC;AACA,SAASC,gBAAT,QAAiC,6BAAjC;;AAEA,MAAMC,eAAN,SAA8BP,SAA9B,CAAwC;AACtCQ,EAAAA,MAAM,GAAG;AACP,QAAI,KAAKC,KAAL,CAAWC,QAAX,CAAoBC,QAApB,KAAiC,SAArC,EAAgD;AAC9C,aAAO,oBAAC,OAAD;AACC,QAAA,QAAQ,EAAE,KAAKF,KAAL,CAAWC,QADtB;AAEC,QAAA,iBAAiB,EAAE,KAAKD,KAAL,CAAWJ,iBAF/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AAID,KALD,MAMK,IAAI,KAAKI,KAAL,CAAWC,QAAX,CAAoBC,QAApB,KAAiC,OAArC,EAA8C;AACjD,aAAO,oBAAC,QAAD;AAAU,QAAA,EAAE,EAAE;AACXC,UAAAA,QAAQ,EAAE;AADC,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AAGD,KAJI,MAKA;AACH,aAAO,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD;AACF;;AAhBqC;;AAmBxC,MAAMC,eAAe,GAAGC,KAAK,KAAK;AAChCJ,EAAAA,QAAQ,EAAEI,KAAK,CAACC,IAAN,CAAWL;AADW,CAAL,CAA7B;;AAIA,MAAMM,kBAAkB,GAAIC,QAAD,IAAc;AACvC,SAAO;AACLZ,IAAAA,iBAAiB,EAAGa,OAAD,IAAaD,QAAQ,CAACZ,iBAAiB,CAACa,OAAD,CAAlB,CADnC;AAELZ,IAAAA,gBAAgB,EAAGa,OAAD,IAAYF,QAAQ,CAACX,gBAAgB,CAACa,OAAD,CAAjB;AAFjC,GAAP;AAID,CALD;;AAOA,eAAelB,OAAO,CAACY,eAAD,EAAkBG,kBAAlB,CAAP,CAA6CT,eAA7C,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Modules from '../components/modules';\nimport AdminDashboard from '../components/AdminDashboard';\nimport { Redirect } from 'react-router-dom';\n\nimport { setSelectedModule } from \"../actions/moduleActions\";\nimport { getFlashcardSets } from \"../actions/dashboardActions\";\n\nclass ModuleContainer extends Component {\n  render() {\n    if (this.props.userInfo.userType === \"Student\") {\n      return <Modules\n              userInfo={this.props.userInfo}\n              setSelectedModule={this.props.setSelectedModule}\n            />\n    }\n    else if (this.props.userInfo.userType === \"Tutor\") {\n      return <Redirect to={{\n                pathname: '/dashboard'\n          }} />\n    }\n    else {\n      return <AdminDashboard />\n    }\n  }\n\n}\nconst mapStateToProps = state => ({\n  userInfo: state.user.userInfo,\n})\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setSelectedModule: (modules) => dispatch(setSelectedModule(modules)),\n    getFlashcardSets: (payload) =>dispatch(getFlashcardSets(payload))\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ModuleContainer)"]},"metadata":{},"sourceType":"module"}