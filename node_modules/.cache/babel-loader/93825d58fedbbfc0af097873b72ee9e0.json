{"ast":null,"code":"var pathGetter = require('./path-getter');\n\nvar utils = require('./utils');\n\nvar WMap = typeof WeakMap !== 'undefined' ? WeakMap : function () {\n  var keys = [];\n  var values = [];\n  return {\n    set: function (key, value) {\n      keys.push(key);\n      values.push(value);\n    },\n    get: function (key) {\n      for (var i = 0; i < keys.length; i++) {\n        if (keys[i] === key) {\n          return values[i];\n        }\n      }\n    }\n  };\n}; // Based on https://github.com/douglascrockford/JSON-js/blob/master/cycle.js\n\nexports.decycle = function decycle(object, options, replacer) {\n  'use strict';\n\n  var map = new WMap();\n  var noCircularOption = !Object.prototype.hasOwnProperty.call(options, 'circular');\n  var withRefs = options.refs !== false;\n  return function derez(_value, path, key) {\n    // The derez recurses through the object, producing the deep copy.\n    var i, // The loop counter\n    name, // Property name\n    nu; // The new object or array\n    // typeof null === 'object', so go on if this value is really an object but not\n    // one of the weird builtin objects.\n\n    var value = typeof replacer === 'function' ? replacer(key || '', _value) : _value;\n\n    if (options.date && value instanceof Date) {\n      return {\n        $jsan: 'd' + value.getTime()\n      };\n    }\n\n    if (options.regex && value instanceof RegExp) {\n      return {\n        $jsan: 'r' + utils.getRegexFlags(value) + ',' + value.source\n      };\n    }\n\n    if (options['function'] && typeof value === 'function') {\n      return {\n        $jsan: 'f' + utils.stringifyFunction(value, options['function'])\n      };\n    }\n\n    if (options['nan'] && typeof value === 'number' && isNaN(value)) {\n      return {\n        $jsan: 'n'\n      };\n    }\n\n    if (options['infinity']) {\n      if (Number.POSITIVE_INFINITY === value) return {\n        $jsan: 'i'\n      };\n      if (Number.NEGATIVE_INFINITY === value) return {\n        $jsan: 'y'\n      };\n    }\n\n    if (options['undefined'] && value === undefined) {\n      return {\n        $jsan: 'u'\n      };\n    }\n\n    if (options['error'] && value instanceof Error) {\n      return {\n        $jsan: 'e' + value.message\n      };\n    }\n\n    if (options['symbol'] && typeof value === 'symbol') {\n      var symbolKey = Symbol.keyFor(value);\n\n      if (symbolKey !== undefined) {\n        return {\n          $jsan: 'g' + symbolKey\n        };\n      } // 'Symbol(foo)'.slice(7, -1) === 'foo'\n\n\n      return {\n        $jsan: 's' + value.toString().slice(7, -1)\n      };\n    }\n\n    if (options['map'] && typeof Map === 'function' && value instanceof Map && typeof Array.from === 'function') {\n      return {\n        $jsan: 'm' + JSON.stringify(decycle(Array.from(value), options, replacer))\n      };\n    }\n\n    if (options['set'] && typeof Set === 'function' && value instanceof Set && typeof Array.from === 'function') {\n      return {\n        $jsan: 'l' + JSON.stringify(decycle(Array.from(value), options, replacer))\n      };\n    }\n\n    if (value && typeof value.toJSON === 'function') {\n      try {\n        value = value.toJSON(key);\n      } catch (error) {\n        var keyString = key || '$';\n        return \"toJSON failed for '\" + (map.get(value) || keyString) + \"'\";\n      }\n    }\n\n    if (typeof value === 'object' && value !== null && !(value instanceof Boolean) && !(value instanceof Date) && !(value instanceof Number) && !(value instanceof RegExp) && !(value instanceof String) && !(typeof value === 'symbol') && !(value instanceof Error)) {\n      // If the value is an object or array, look to see if we have already\n      // encountered it. If so, return a $ref/path object.\n      if (typeof value === 'object') {\n        var foundPath = map.get(value);\n\n        if (foundPath) {\n          if (noCircularOption && withRefs) {\n            return {\n              $jsan: foundPath\n            };\n          }\n\n          if (path.indexOf(foundPath) === 0) {\n            if (!noCircularOption) {\n              return typeof options.circular === 'function' ? options.circular(value, path, foundPath) : options.circular;\n            }\n\n            return {\n              $jsan: foundPath\n            };\n          }\n\n          if (withRefs) return {\n            $jsan: foundPath\n          };\n        }\n\n        map.set(value, path);\n      } // If it is an array, replicate the array.\n\n\n      if (Object.prototype.toString.apply(value) === '[object Array]') {\n        nu = [];\n\n        for (i = 0; i < value.length; i += 1) {\n          nu[i] = derez(value[i], path + '[' + i + ']', i);\n        }\n      } else {\n        // If it is an object, replicate the object.\n        nu = {};\n\n        for (name in value) {\n          if (Object.prototype.hasOwnProperty.call(value, name)) {\n            var nextPath = /^\\w+$/.test(name) ? '.' + name : '[' + JSON.stringify(name) + ']';\n            nu[name] = name === '$jsan' ? [derez(value[name], path + nextPath)] : derez(value[name], path + nextPath, name);\n          }\n        }\n      }\n\n      return nu;\n    }\n\n    return value;\n  }(object, '$');\n};\n\nexports.retrocycle = function retrocycle($) {\n  'use strict';\n\n  return function rez(value) {\n    // The rez function walks recursively through the object looking for $jsan\n    // properties. When it finds one that has a value that is a path, then it\n    // replaces the $jsan object with a reference to the value that is found by\n    // the path.\n    var i, item, name, path;\n\n    if (value && typeof value === 'object') {\n      if (Object.prototype.toString.apply(value) === '[object Array]') {\n        for (i = 0; i < value.length; i += 1) {\n          item = value[i];\n\n          if (item && typeof item === 'object') {\n            if (item.$jsan) {\n              value[i] = utils.restore(item.$jsan, $);\n            } else {\n              rez(item);\n            }\n          }\n        }\n      } else {\n        for (name in value) {\n          // base case passed raw object\n          if (typeof value[name] === 'string' && name === '$jsan') {\n            return utils.restore(value.$jsan, $);\n            break;\n          } else {\n            if (name === '$jsan') {\n              value[name] = value[name][0];\n            }\n\n            if (typeof value[name] === 'object') {\n              item = value[name];\n\n              if (item && typeof item === 'object') {\n                if (item.$jsan) {\n                  value[name] = utils.restore(item.$jsan, $);\n                } else {\n                  rez(item);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return value;\n  }($);\n};","map":null,"metadata":{},"sourceType":"script"}