{"ast":null,"code":"/**\n * Contains service handlers for all user account actions\n */\nimport * as actionTypes from \"./actionTypes\";\nimport axios from \"axios\";\naxios.defaults.baseURL = 'https://get-sat-pro.herokuapp.com/api';\naxios.defaults.headers.common['Accept'] = 'application/json';\naxios.defaults.headers.post['Content-Type'] = 'application/json';\naxios.defaults.withCredentials = true;\nconst baseUrl = \"https://get-sat-pro.herokuapp.com/api\";\n/**\n * loginUser communicates with the login API, and logs in the user. Also stores the JWT token in the local storage\n * @param {Object} user \n */\n\nexport function loginUser(user) {\n  // return async dispatch =>{\n  //     return axios.get(`${baseUrl}/logout`, {\n  //         headers: {\n  //             'Content-Type': 'application/json',\n  //             'Accept': 'application/json',\n  //         }\n  //     })\n  // }\n  return async dispatch => {\n    dispatch({\n      type: actionTypes.LOGIN_USER_STARTED\n    });\n    return axios.post(\"/login\", user).then(result => {\n      localStorage.setItem(\"token\", result.data.token);\n      dispatch({\n        type: actionTypes.LOGIN_USER_SUCESS,\n        payload: result.data\n      });\n    }).catch(error => {\n      dispatch({\n        type: actionTypes.LOGIN_USER_FAILED,\n        error: error.response.data.message\n      });\n    });\n  };\n}\n/**\n * registerUser communicated with registerUser API, registers the user. \n * @param {Object} registerData \n */\n\nexport function registerUser(registerData) {\n  return async dispatch => {\n    dispatch({\n      type: actionTypes.REGISTERATION_STARTED\n    }); //TODO service call for register\n\n    const resp = await fetch(\"\".concat(baseUrl, \"/register\"), {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      },\n      body: JSON.stringify(registerData)\n    });\n    const payload = await resp.json();\n\n    if (payload.Status === 200) {\n      dispatch({\n        type: actionTypes.REGISTRATION_SUCCESS,\n        payload: payload.message\n      });\n    } else {\n      dispatch({\n        type: actionTypes.REGISTRATION_FAILED,\n        error: payload.message\n      });\n    }\n  };\n}\n/**\n * logoutUser communicates with the logout API and removes the JWT token from the local storage\n */\n\nexport function logoutUser() {\n  console.log(\"here- Lgout\");\n  return async dispatch => {\n    dispatch({\n      type: actionTypes.LOGOUT_USER_STARTED\n    });\n    return axios.get(\"/logout\").then(payload => {\n      localStorage.removeItem(\"token\", payload.token);\n      dispatch({\n        type: actionTypes.LOGOUT_USER_SUCESS,\n        payload: payload.data.message\n      });\n    }).catch(error => {\n      dispatch({\n        type: actionTypes.LOGOUT_USER_FAILED,\n        error: error.response.data.message\n      });\n    });\n  };\n}\nexport function getModulesList(reqObject) {\n  console.log(\"HERE\", reqObject);\n  return async dispatch => {\n    dispatch({\n      type: actionTypes.GET_MODULE_LIST_STARTED\n    });\n    return fetch(\"\".concat(baseUrl, \"/get_modules\"), {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': \"Bearer \".concat(localStorage.getItem(\"token\"))\n      },\n      body: JSON.stringify(reqObject)\n    }).then(response => response.json()).then(payload => {\n      console.log(\"HERE\");\n\n      if (payload.Status === 200) {\n        dispatch({\n          type: actionTypes.GET_MODULE_LIST_SUCCESS,\n          payload: payload\n        });\n      } else {\n        dispatch({\n          type: actionTypes.GET_MODULE_LIST_FAILED,\n          error: payload.message\n        });\n      }\n    });\n  };\n}","map":{"version":3,"sources":["/Users/annuabraham/Documents/GitHub/ENPM613/client/src/actions/userHandler.js"],"names":["actionTypes","axios","defaults","baseURL","headers","common","post","withCredentials","baseUrl","loginUser","user","dispatch","type","LOGIN_USER_STARTED","then","result","localStorage","setItem","data","token","LOGIN_USER_SUCESS","payload","catch","error","LOGIN_USER_FAILED","response","message","registerUser","registerData","REGISTERATION_STARTED","resp","fetch","method","body","JSON","stringify","json","Status","REGISTRATION_SUCCESS","REGISTRATION_FAILED","logoutUser","console","log","LOGOUT_USER_STARTED","get","removeItem","LOGOUT_USER_SUCESS","LOGOUT_USER_FAILED","getModulesList","reqObject","GET_MODULE_LIST_STARTED","getItem","GET_MODULE_LIST_SUCCESS","GET_MODULE_LIST_FAILED"],"mappings":"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","sourcesContent":["/**\n * Contains service handlers for all user account actions\n */\n\nimport * as actionTypes from \"./actionTypes\";\nimport axios from \"axios\";\n\naxios.defaults.baseURL = 'https://get-sat-pro.herokuapp.com/api';\naxios.defaults.headers.common['Accept'] = 'application/json';\naxios.defaults.headers.post['Content-Type'] = 'application/json';\naxios.defaults.withCredentials = true;\n\nconst baseUrl = \"https://get-sat-pro.herokuapp.com/api\";\n\n/**\n * loginUser communicates with the login API, and logs in the user. Also stores the JWT token in the local storage\n * @param {Object} user \n */\nexport function loginUser(user) {\n\n    // return async dispatch =>{\n    //     return axios.get(`${baseUrl}/logout`, {\n    //         headers: {\n    //             'Content-Type': 'application/json',\n    //             'Accept': 'application/json',\n    //         }\n    //     })\n    // }\n\n\n    return async dispatch => {\n        dispatch({\n            type: actionTypes.LOGIN_USER_STARTED\n        });\n        return axios.post(`/login`, user)\n        .then(result => {\n            localStorage.setItem(\"token\", result.data.token);\n            dispatch({\n                type: actionTypes.LOGIN_USER_SUCESS,\n                payload: result.data\n        })\n        })\n        .catch(error =>{\n            dispatch({\n                type: actionTypes.LOGIN_USER_FAILED,\n                error: error.response.data.message\n            });\n        })\n  }\n}\n\n/**\n * registerUser communicated with registerUser API, registers the user. \n * @param {Object} registerData \n */\nexport function registerUser(registerData) {\n    return async dispatch =>{\n        dispatch({\n            type: actionTypes.REGISTERATION_STARTED\n        });\n        //TODO service call for register\n        const resp = await fetch(`${baseUrl}/register`, {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            },\n            body: JSON.stringify(registerData)\n        });\n        const payload = await resp.json();\n        if (payload.Status === 200) {\n            dispatch({\n                type: actionTypes.REGISTRATION_SUCCESS,\n                payload: payload.message\n            });\n        }\n        else {\n            dispatch({\n                type: actionTypes.REGISTRATION_FAILED,\n                error: payload.message\n            });\n        }\n    }\n    \n}\n/**\n * logoutUser communicates with the logout API and removes the JWT token from the local storage\n */\nexport function logoutUser() {\n    console.log(\"here- Lgout\")\n    return async dispatch => {\n        dispatch({\n            type: actionTypes.LOGOUT_USER_STARTED\n        });\n        return axios.get(`/logout`)\n        .then(payload => {\n            localStorage.removeItem(\"token\", payload.token);\n            dispatch({\n                type: actionTypes.LOGOUT_USER_SUCESS,\n                payload: payload.data.message\n            });\n        })\n        .catch(error =>{\n            dispatch({\n                type: actionTypes.LOGOUT_USER_FAILED,\n                error: error.response.data.message\n            });\n        })\n    }\n  }\n\n  export function getModulesList(reqObject) {\n      console.log(\"HERE\", reqObject)\n    return async dispatch => {\n        dispatch({\n            type: actionTypes.GET_MODULE_LIST_STARTED\n        })\n        return fetch(`${baseUrl}/get_modules`,{\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json',\n                'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n            },\n            body: JSON.stringify(reqObject)\n        })\n        .then(response => response.json())\n        .then(payload => {\n            console.log(\"HERE\")\n            if (payload.Status === 200) {\n                dispatch({\n                    type: actionTypes.GET_MODULE_LIST_SUCCESS,\n                    payload: payload\n                });\n            }\n            else {\n                dispatch({\n                    type: actionTypes.GET_MODULE_LIST_FAILED,\n                    error: payload.message\n                });\n            }\n        })\n    }\n  }\n\n"]},"metadata":{},"sourceType":"module"}