{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nexports.FilterState = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nexports.arrToRegex = arrToRegex;\nexports.getLocalFilter = getLocalFilter;\nexports.isFiltered = isFiltered;\nexports.filterStagedActions = filterStagedActions;\nexports.filterState = filterState;\n\nvar _mapValues = require('lodash/mapValues');\n\nvar _mapValues2 = _interopRequireDefault(_mapValues);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar FilterState = exports.FilterState = {\n  DO_NOT_FILTER: 'DO_NOT_FILTER',\n  BLACKLIST_SPECIFIC: 'BLACKLIST_SPECIFIC',\n  WHITELIST_SPECIFIC: 'WHITELIST_SPECIFIC'\n};\n\nfunction arrToRegex(v) {\n  return typeof v === 'string' ? v : v.join('|');\n}\n\nfunction filterActions(actionsById, actionsFilter) {\n  if (!actionsFilter) return actionsById;\n  return (0, _mapValues2.default)(actionsById, function (action, id) {\n    return _extends({}, action, {\n      action: actionsFilter(action.action, id)\n    });\n  });\n}\n\nfunction filterStates(computedStates, statesFilter) {\n  if (!statesFilter) return computedStates;\n  return computedStates.map(function (state, idx) {\n    return _extends({}, state, {\n      state: statesFilter(state.state, idx)\n    });\n  });\n}\n\nfunction getLocalFilter(config) {\n  if (config.actionsBlacklist || config.actionsWhitelist) {\n    return {\n      whitelist: config.actionsWhitelist && config.actionsWhitelist.join('|'),\n      blacklist: config.actionsBlacklist && config.actionsBlacklist.join('|')\n    };\n  }\n\n  return undefined;\n}\n\nfunction getDevToolsOptions() {\n  return typeof window !== 'undefined' && window.devToolsOptions || {};\n}\n\nfunction isFiltered(action, localFilter) {\n  var _ref = action.action || action,\n      type = _ref.type;\n\n  var opts = getDevToolsOptions();\n  if (!localFilter && opts.filter && opts.filter === FilterState.DO_NOT_FILTER || type && typeof type.match !== 'function') return false;\n\n  var _ref2 = localFilter || opts,\n      whitelist = _ref2.whitelist,\n      blacklist = _ref2.blacklist;\n\n  return whitelist && !type.match(whitelist) || blacklist && type.match(blacklist);\n}\n\nfunction filterStagedActions(state, filters) {\n  if (!filters) return state;\n  var filteredStagedActionIds = [];\n  var filteredComputedStates = [];\n  state.stagedActionIds.forEach(function (id, idx) {\n    if (!isFiltered(state.actionsById[id], filters)) {\n      filteredStagedActionIds.push(id);\n      filteredComputedStates.push(state.computedStates[idx]);\n    }\n  });\n  return _extends({}, state, {\n    stagedActionIds: filteredStagedActionIds,\n    computedStates: filteredComputedStates\n  });\n}\n\nfunction filterState(state, type, localFilter, stateSanitizer, actionSanitizer, nextActionId, predicate) {\n  if (type === 'ACTION') return !stateSanitizer ? state : stateSanitizer(state, nextActionId - 1);else if (type !== 'STATE') return state;\n\n  var _getDevToolsOptions = getDevToolsOptions(),\n      filter = _getDevToolsOptions.filter;\n\n  if (predicate || localFilter || filter && filter !== FilterState.DO_NOT_FILTER) {\n    var filteredStagedActionIds = [];\n    var filteredComputedStates = [];\n    var sanitizedActionsById = actionSanitizer && {};\n    var actionsById = state.actionsById;\n    var computedStates = state.computedStates;\n    state.stagedActionIds.forEach(function (id, idx) {\n      var liftedAction = actionsById[id];\n      var currAction = liftedAction.action;\n      var liftedState = computedStates[idx];\n      var currState = liftedState.state;\n\n      if (idx) {\n        if (predicate && !predicate(currState, currAction)) return;\n        if (isFiltered(currAction, localFilter)) return;\n      }\n\n      filteredStagedActionIds.push(id);\n      filteredComputedStates.push(stateSanitizer ? _extends({}, liftedState, {\n        state: stateSanitizer(currState, idx)\n      }) : liftedState);\n\n      if (actionSanitizer) {\n        sanitizedActionsById[id] = _extends({}, liftedAction, {\n          action: actionSanitizer(currAction, id)\n        });\n      }\n    });\n    return _extends({}, state, {\n      actionsById: sanitizedActionsById || actionsById,\n      stagedActionIds: filteredStagedActionIds,\n      computedStates: filteredComputedStates\n    });\n  }\n\n  if (!stateSanitizer && !actionSanitizer) return state;\n  return _extends({}, state, {\n    actionsById: filterActions(state.actionsById, actionSanitizer),\n    computedStates: filterStates(state.computedStates, stateSanitizer)\n  });\n}","map":null,"metadata":{},"sourceType":"script"}