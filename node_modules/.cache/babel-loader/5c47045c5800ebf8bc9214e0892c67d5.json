{"ast":null,"code":"/**\n * Conatins all the service handlers for the student related actions\n */\nimport * as actionTypes from \"./actionTypes\";\nimport axios from \"axios\";\naxios.defaults.baseURL = 'https://get-sat-pro.herokuapp.com/api';\naxios.defaults.headers.common['Accept'] = 'application/json';\naxios.defaults.headers.post['Content-Type'] = 'application/json';\naxios.defaults.headers.common['Authorization'] = \"Bearer \".concat(localStorage.getItem(\"token\"));\naxios.defaults.withCredentials = true;\n/**\n * gets the list of students after communicating with the get_students API\n */\n//credentials: 'include' sends the cookie along with request. fetch by default does not inlude cookies\n\nexport function getStudentList() {\n  return async dispatch => {\n    dispatch({\n      type: actionTypes.GET_STUDENT_LIST_STARTED\n    });\n    return axios.get(\"/get_students\").then(result => {\n      dispatch({\n        type: actionTypes.GET_STUDENT_LIST_SUCCESS,\n        payload: result.data.students\n      });\n    }).catch(error => {\n      dispatch({\n        type: actionTypes.GET_STUDENT_LIST_SUCCESS,\n        error: error.data.message\n      });\n    });\n  };\n}\nexport function getModulesList(reqObject) {\n  return async dispatch => {\n    dispatch({\n      type: actionTypes.GET_MODULE_LIST_STARTED\n    });\n    return fetch(\"\".concat(baseUrl, \"/get_modules\"), {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': \"Bearer \".concat(localStorage.getItem(\"token\"))\n      },\n      body: JSON.stringify(reqObject)\n    }).then(response => response.json()).then(payload => {\n      if (payload.Status === 200) {\n        dispatch({\n          type: actionTypes.GET_MODULE_LIST_SUCCESS,\n          payload: payload\n        });\n      } else {\n        dispatch({\n          type: actionTypes.GET_MODULE_LIST_FAILED,\n          error: payload.message\n        });\n      }\n    });\n  };\n}","map":{"version":3,"sources":["/Users/annuabraham/Documents/GitHub/ENPM613/client/src/actions/studentHandler.js"],"names":["actionTypes","axios","defaults","baseURL","headers","common","post","localStorage","getItem","withCredentials","getStudentList","dispatch","type","GET_STUDENT_LIST_STARTED","get","then","result","GET_STUDENT_LIST_SUCCESS","payload","data","students","catch","error","message","getModulesList","reqObject","GET_MODULE_LIST_STARTED","fetch","baseUrl","method","body","JSON","stringify","response","json","Status","GET_MODULE_LIST_SUCCESS","GET_MODULE_LIST_FAILED"],"mappings":"AAAA;;;AAGA,OAAO,KAAKA,WAAZ,MAA6B,eAA7B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEAA,KAAK,CAACC,QAAN,CAAeC,OAAf,GAAyB,uCAAzB;AACAF,KAAK,CAACC,QAAN,CAAeE,OAAf,CAAuBC,MAAvB,CAA8B,QAA9B,IAA0C,kBAA1C;AACAJ,KAAK,CAACC,QAAN,CAAeE,OAAf,CAAuBE,IAAvB,CAA4B,cAA5B,IAA8C,kBAA9C;AACAL,KAAK,CAACC,QAAN,CAAeE,OAAf,CAAuBC,MAAvB,CAA8B,eAA9B,qBAA2DE,YAAY,CAACC,OAAb,CAAqB,OAArB,CAA3D;AACAP,KAAK,CAACC,QAAN,CAAeO,eAAf,GAAiC,IAAjC;AAGA;;;AAIA;;AACA,OAAO,SAASC,cAAT,GAA0B;AAC7B,SAAO,MAAMC,QAAN,IAAkB;AACrBA,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEZ,WAAW,CAACa;AADb,KAAD,CAAR;AAGA,WAAOZ,KAAK,CAACa,GAAN,kBACNC,IADM,CACDC,MAAM,IAAI;AACZL,MAAAA,QAAQ,CAAC;AACLC,QAAAA,IAAI,EAAEZ,WAAW,CAACiB,wBADb;AAELC,QAAAA,OAAO,EAAEF,MAAM,CAACG,IAAP,CAAYC;AAFhB,OAAD,CAAR;AAIH,KANM,EAONC,KAPM,CAOAC,KAAK,IAAG;AACXX,MAAAA,QAAQ,CAAC;AACLC,QAAAA,IAAI,EAAEZ,WAAW,CAACiB,wBADb;AAELK,QAAAA,KAAK,EAAEA,KAAK,CAACH,IAAN,CAAWI;AAFb,OAAD,CAAR;AAIH,KAZM,CAAP;AAaL,GAjBC;AAkBH;AAED,OAAO,SAASC,cAAT,CAAwBC,SAAxB,EAAmC;AACtC,SAAO,MAAMd,QAAN,IAAkB;AACrBA,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEZ,WAAW,CAAC0B;AADb,KAAD,CAAR;AAGA,WAAOC,KAAK,WAAIC,OAAJ,mBAA2B;AACnCC,MAAAA,MAAM,EAAE,MAD2B;AAEnCzB,MAAAA,OAAO,EAAE;AACL,wBAAgB,kBADX;AAEL,kBAAU,kBAFL;AAGL,0CAA2BG,YAAY,CAACC,OAAb,CAAqB,OAArB,CAA3B;AAHK,OAF0B;AAOnCsB,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeP,SAAf;AAP6B,KAA3B,CAAL,CASFV,IATE,CASGkB,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EATf,EAUFnB,IAVE,CAUGG,OAAO,IAAI;AACb,UAAIA,OAAO,CAACiB,MAAR,KAAmB,GAAvB,EAA4B;AACxBxB,QAAAA,QAAQ,CAAC;AACLC,UAAAA,IAAI,EAAEZ,WAAW,CAACoC,uBADb;AAELlB,UAAAA,OAAO,EAAEA;AAFJ,SAAD,CAAR;AAIH,OALD,MAMK;AACDP,QAAAA,QAAQ,CAAC;AACLC,UAAAA,IAAI,EAAEZ,WAAW,CAACqC,sBADb;AAELf,UAAAA,KAAK,EAAEJ,OAAO,CAACK;AAFV,SAAD,CAAR;AAIH;AACJ,KAvBE,CAAP;AAwBH,GA5BD;AA6BH","sourcesContent":["/**\n * Conatins all the service handlers for the student related actions\n */\nimport * as actionTypes from \"./actionTypes\";\nimport axios from \"axios\";\n\naxios.defaults.baseURL = 'https://get-sat-pro.herokuapp.com/api';\naxios.defaults.headers.common['Accept'] = 'application/json';\naxios.defaults.headers.post['Content-Type'] = 'application/json';\naxios.defaults.headers.common['Authorization'] = `Bearer ${localStorage.getItem(\"token\")}` \naxios.defaults.withCredentials = true\n\n\n/**\n * gets the list of students after communicating with the get_students API\n */\n\n//credentials: 'include' sends the cookie along with request. fetch by default does not inlude cookies\nexport function getStudentList() {\n    return async dispatch => {\n        dispatch({\n            type: actionTypes.GET_STUDENT_LIST_STARTED\n        });\n        return axios.get(`/get_students`)\n        .then(result => {\n            dispatch({\n                type: actionTypes.GET_STUDENT_LIST_SUCCESS,\n                payload: result.data.students\n            })\n        })\n        .catch(error =>{\n            dispatch({\n                type: actionTypes.GET_STUDENT_LIST_SUCCESS,\n                error: error.data.message\n            });\n        })\n  }\n}\n\nexport function getModulesList(reqObject) {\n    return async dispatch => {\n        dispatch({\n            type: actionTypes.GET_MODULE_LIST_STARTED\n        })\n        return fetch(`${baseUrl}/get_modules`, {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json',\n                'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n            },\n            body: JSON.stringify(reqObject)\n        })\n            .then(response => response.json())\n            .then(payload => {\n                if (payload.Status === 200) {\n                    dispatch({\n                        type: actionTypes.GET_MODULE_LIST_SUCCESS,\n                        payload: payload\n                    });\n                }\n                else {\n                    dispatch({\n                        type: actionTypes.GET_MODULE_LIST_FAILED,\n                        error: payload.message\n                    });\n                }\n            })\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}