{"ast":null,"code":"/**\n * Contains service handlers for all user account actions\n */\nimport * as actionTypes from \"./actionTypes\";\nimport axios from \"axios\";\naxios.defaults.baseURL = 'https://get-sat-pro.herokuapp.com/api';\naxios.defaults.headers.common['Accept'] = 'application/json';\naxios.defaults.headers.post['Content-Type'] = 'application/json'; //axios.defaults.headers.common['Authorization'] = `Bearer ${localStorage.getItem(\"token\")}` \n//axios.defaults.withCredentials = true;\n\nconst baseUrl = \"https://get-sat-pro.herokuapp.com/api\";\n/**\n * loginUser communicates with the login API, and logs in the user. Also stores the JWT token in the local storage\n * @param {Object} user \n */\n\nexport function loginUser(user) {\n  // return async dispatch =>{\n  //     return axios.get(`${baseUrl}/logout`, {\n  //         headers: {\n  //             'Content-Type': 'application/json',\n  //             'Accept': 'application/json',\n  //         }\n  //     })\n  // }\n  return function (dispatch) {\n    return axios.post(\"/login\", user).then(result => {\n      localStorage.setItem(\"token\", result.data.token);\n      dispatch({\n        type: actionTypes.LOGIN_USER_SUCESS,\n        payload: result.data\n      });\n    }).catch(error => {\n      dispatch({\n        type: actionTypes.LOGIN_USER_FAILED,\n        error: error.response.data.message\n      });\n    });\n  }; // return async dispatch => {\n  //     dispatch({\n  //         type: actionTypes.LOGIN_USER_STARTED\n  //     });\n  //     return axios.post(`/login`, user)\n  //     .then(result => {\n  //         localStorage.setItem(\"token\", result.data.token);\n  //         dispatch({\n  //             type: actionTypes.LOGIN_USER_SUCESS,\n  //             payload: result.data\n  //         })\n  //     })\n  //     .catch(error => {\n  //         dispatch({\n  //             type: actionTypes.LOGIN_USER_FAILED,\n  //             error: error.response.data.message\n  //         });\n  //     })\n  // }\n}\n/**\n * registerUser communicated with registerUser API, registers the user. \n * @param {Object} registerData \n */\n\nexport function registerUser(registerData) {\n  return async dispatch => {\n    dispatch({\n      type: actionTypes.REGISTERATION_STARTED\n    });\n    return axios.post(\"/register\", registerData).then(result => {\n      dispatch({\n        type: actionTypes.REGISTRATION_SUCCESS,\n        payload: result.data.message\n      });\n    }).catch(error => {\n      dispatch({\n        type: actionTypes.REGISTRATION_FAILED,\n        error: error.response.message\n      });\n    });\n  };\n}\n/**\n * logoutUser communicates with the logout API and removes the JWT token from the local storage\n */\n\nexport function logoutUser() {\n  return async dispatch => {\n    dispatch({\n      type: actionTypes.LOGOUT_USER_STARTED\n    });\n    return axios.get(\"/logout\").then(payload => {\n      localStorage.removeItem(\"token\", payload.token);\n      dispatch({\n        type: actionTypes.LOGOUT_USER_SUCESS,\n        payload: payload.data.message\n      });\n    }).catch(error => {\n      dispatch({\n        type: actionTypes.LOGOUT_USER_FAILED,\n        error: error.response.data.message\n      });\n    });\n  };\n}","map":{"version":3,"sources":["/Users/annuabraham/Documents/GitHub/ENPM613/src/actions/userHandler.js"],"names":["actionTypes","axios","defaults","baseURL","headers","common","post","baseUrl","loginUser","user","dispatch","then","result","localStorage","setItem","data","token","type","LOGIN_USER_SUCESS","payload","catch","error","LOGIN_USER_FAILED","response","message","registerUser","registerData","REGISTERATION_STARTED","REGISTRATION_SUCCESS","REGISTRATION_FAILED","logoutUser","LOGOUT_USER_STARTED","get","removeItem","LOGOUT_USER_SUCESS","LOGOUT_USER_FAILED"],"mappings":"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","sourcesContent":["/**\n * Contains service handlers for all user account actions\n */\n\nimport * as actionTypes from \"./actionTypes\";\nimport axios from \"axios\";\n\naxios.defaults.baseURL = 'https://get-sat-pro.herokuapp.com/api';\naxios.defaults.headers.common['Accept'] = 'application/json';\naxios.defaults.headers.post['Content-Type'] = 'application/json';\n//axios.defaults.headers.common['Authorization'] = `Bearer ${localStorage.getItem(\"token\")}` \n//axios.defaults.withCredentials = true;\n\nconst baseUrl = \"https://get-sat-pro.herokuapp.com/api\";\n\n/**\n * loginUser communicates with the login API, and logs in the user. Also stores the JWT token in the local storage\n * @param {Object} user \n */\nexport function loginUser(user) {\n\n    // return async dispatch =>{\n    //     return axios.get(`${baseUrl}/logout`, {\n    //         headers: {\n    //             'Content-Type': 'application/json',\n    //             'Accept': 'application/json',\n    //         }\n    //     })\n    // }\n\n    return function(dispatch){\n        return axios.post(`/login`, user)\n            .then(result => {\n                localStorage.setItem(\"token\", result.data.token);\n                dispatch({\n                    type: actionTypes.LOGIN_USER_SUCESS,\n                    payload: result.data\n                })\n            })\n            .catch(error => {\n                dispatch({\n                    type: actionTypes.LOGIN_USER_FAILED,\n                    error: error.response.data.message\n                });\n            })\n    }\n\n    // return async dispatch => {\n    //     dispatch({\n    //         type: actionTypes.LOGIN_USER_STARTED\n    //     });\n    //     return axios.post(`/login`, user)\n    //     .then(result => {\n    //         localStorage.setItem(\"token\", result.data.token);\n    //         dispatch({\n    //             type: actionTypes.LOGIN_USER_SUCESS,\n    //             payload: result.data\n    //         })\n    //     })\n    //     .catch(error => {\n    //         dispatch({\n    //             type: actionTypes.LOGIN_USER_FAILED,\n    //             error: error.response.data.message\n    //         });\n    //     })\n    // }\n}\n\n/**\n * registerUser communicated with registerUser API, registers the user. \n * @param {Object} registerData \n */\nexport function registerUser(registerData) {\n    return async dispatch => {\n        dispatch({\n            type: actionTypes.REGISTERATION_STARTED\n        });\n        return axios.post(`/register`, registerData)\n            .then(result => {\n                dispatch({\n                    type: actionTypes.REGISTRATION_SUCCESS,\n                    payload: result.data.message\n                })\n            })\n            .catch(error => {\n                dispatch({\n                    type: actionTypes.REGISTRATION_FAILED,\n                    error: error.response.message\n                });\n            })\n    }\n\n}\n/**\n * logoutUser communicates with the logout API and removes the JWT token from the local storage\n */\nexport function logoutUser() {\n    return async dispatch => {\n        dispatch({\n            type: actionTypes.LOGOUT_USER_STARTED\n        });\n        return axios.get(`/logout`)\n            .then(payload => {\n                localStorage.removeItem(\"token\", payload.token);\n                dispatch({\n                    type: actionTypes.LOGOUT_USER_SUCESS,\n                    payload: payload.data.message\n                });\n            })\n            .catch(error => {\n                dispatch({\n                    type: actionTypes.LOGOUT_USER_FAILED,\n                    error: error.response.data.message\n                });\n            })\n    }\n}\n"]},"metadata":{},"sourceType":"module"}