{"ast":null,"code":"/**\n * Contains all the service handlers for exam related actions\n */\nimport * as actionTypes from \"./actionTypes\";\nimport axios from \"axios\";\naxios.defaults.baseURL = 'https://get-sat-pro.herokuapp.com/api';\naxios.defaults.headers.common['Accept'] = 'application/json';\naxios.defaults.headers.post['Content-Type'] = 'application/json';\naxios.defaults.headers.common['Authorization'] = \"Bearer \".concat(localStorage.getItem(\"token\"));\naxios.defaults.withCredentials = true;\nconst baseUrl = \"https://get-sat-pro.herokuapp.com/api\";\n/**\n * getExamlist gets the list of exams for a particular module\n * @param {Object} reqObject \n */\n\nexport function getExamListTutor() {\n  return async dispatch => {\n    dispatch({\n      type: actionTypes.GET_EXAM_LIST_STARTED\n    });\n    return axios.get(\"/get_exams\").then(response => {\n      console.log(\"Exams\", response);\n      dispatch({\n        type: actionTypes.GET_EXAM_LIST_SUCCESS,\n        payload: response.data.exams\n      });\n    }).catch(error => {\n      dispatch({\n        type: actionTypes.GET_EXAM_LIST_FAILED,\n        error: error.response.message\n      });\n    });\n  };\n}\n/**\n * submitExam submits the exam taken by the student\n * @param {Object} reqObject \n */\n\nexport function submitExam(reqObject) {\n  return async dispatch => {\n    dispatch({\n      type: actionTypes.SUBMIT_EXAM_STARTED\n    });\n    return fetch(\"\".concat(baseUrl, \"/get_exams/{mod_id}\"), {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': \"Bearer \".concat(localStorage.getItem(\"token\"))\n      },\n      body: JSON.stringify(reqObject)\n    }).then(response => response.json()).then(payload => {\n      if (payload.Status === 200) {\n        dispatch({\n          type: actionTypes.SUBMIT_EXAM_SUCCESS,\n          payload: payload.message\n        });\n      } else {\n        dispatch({\n          type: actionTypes.SUBMIT_EXAM_FAILED,\n          error: payload.message\n        });\n      }\n    });\n  };\n}\n/**\n * Creates a new exam\n * @param {Object} reqObject \n */\n\nexport function createExam(reqObject) {\n  return async dispatch => {\n    dispatch({\n      type: actionTypes.CREATE_EXAM_STARTED\n    });\n    return fetch(\"\".concat(baseUrl, \"/get_exams/{mod_id}\"), {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': \"Bearer \".concat(localStorage.getItem(\"token\"))\n      },\n      body: JSON.stringify(reqObject)\n    }).then(response => response.json()).then(payload => {\n      if (payload.Status === 200) {\n        dispatch({\n          type: actionTypes.CREATE_EXAM_SUCCESS,\n          payload: payload.message\n        });\n      } else {\n        dispatch({\n          type: actionTypes.CREATE_EXAM_FAILED,\n          error: payload.message\n        });\n      }\n    });\n  };\n}\n/**\n * Deletes a particular Exam\n * @param {Object} reqObject \n */\n\nexport function deleteExam(reqObject) {\n  return async dispatch => {\n    dispatch({\n      type: actionTypes.DELETE_EXAM_STARTED\n    });\n    return fetch(\"\".concat(baseUrl, \"/get_exams/{mod_id}\"), {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': \"Bearer \".concat(localStorage.getItem(\"token\"))\n      },\n      body: JSON.stringify(reqObject)\n    }).then(response => response.json()).then(payload => {\n      if (payload.Status === 200) {\n        dispatch({\n          type: actionTypes.DELETE_EXAM_SUCCESS,\n          payload: payload.message\n        });\n      } else {\n        dispatch({\n          type: actionTypes.DELETE_EXAM_FAILED,\n          error: payload.message\n        });\n      }\n    });\n  };\n}\n/**\n* getExamlist gets a particular exam\n* @param {Object} reqObject \n*/\n\nexport function getExam(reqObject) {\n  return async dispatch => {\n    dispatch({\n      type: actionTypes.GET_EXAM_LIST_STARTED\n    });\n    return fetch(\"\".concat(baseUrl, \"/get_exams/{mod_id}\"), {\n      method: \"GET\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': \"Bearer \".concat(localStorage.getItem(\"token\"))\n      },\n      body: JSON.stringify(reqObject)\n    }).then(response => response.json()).then(payload => {\n      if (payload.Status === 200) {\n        dispatch({\n          type: actionTypes.GET_EXAM_LIST_SUCCESS,\n          payload: payload\n        });\n      } else {\n        dispatch({\n          type: actionTypes.GET_EXAM_LIST_FAILED,\n          error: payload.message\n        });\n      }\n    });\n  };\n}","map":{"version":3,"sources":["/Users/annuabraham/Documents/GitHub/ENPM613/client/src/actions/examHandler.js"],"names":["actionTypes","axios","defaults","baseURL","headers","common","post","localStorage","getItem","withCredentials","baseUrl","getExamListTutor","dispatch","type","GET_EXAM_LIST_STARTED","get","then","response","console","log","GET_EXAM_LIST_SUCCESS","payload","data","exams","catch","error","GET_EXAM_LIST_FAILED","message","submitExam","reqObject","SUBMIT_EXAM_STARTED","fetch","method","body","JSON","stringify","json","Status","SUBMIT_EXAM_SUCCESS","SUBMIT_EXAM_FAILED","createExam","CREATE_EXAM_STARTED","CREATE_EXAM_SUCCESS","CREATE_EXAM_FAILED","deleteExam","DELETE_EXAM_STARTED","DELETE_EXAM_SUCCESS","DELETE_EXAM_FAILED","getExam"],"mappings":"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","sourcesContent":["/**\n * Contains all the service handlers for exam related actions\n */\n\nimport * as actionTypes from \"./actionTypes\";\nimport axios from \"axios\";\n\naxios.defaults.baseURL = 'https://get-sat-pro.herokuapp.com/api';\naxios.defaults.headers.common['Accept'] = 'application/json';\naxios.defaults.headers.post['Content-Type'] = 'application/json';\naxios.defaults.headers.common['Authorization'] = `Bearer ${localStorage.getItem(\"token\")}` \naxios.defaults.withCredentials = true\n\nconst baseUrl = \"https://get-sat-pro.herokuapp.com/api\";\n\n/**\n * getExamlist gets the list of exams for a particular module\n * @param {Object} reqObject \n */\nexport function getExamListTutor() {\n    return async dispatch => {\n        dispatch({\n            type: actionTypes.GET_EXAM_LIST_STARTED\n        });\n        return axios.get(`/get_exams`)\n        .then(response => {\n            console.log(\"Exams\", response)\n            dispatch({\n                type: actionTypes.GET_EXAM_LIST_SUCCESS,\n                payload: response.data.exams\n            })\n        })\n        .catch( error =>{\n            dispatch({\n                type: actionTypes.GET_EXAM_LIST_FAILED,\n                error: error.response.message\n            })\n        })\n    }\n  }\n\n  /**\n   * submitExam submits the exam taken by the student\n   * @param {Object} reqObject \n   */\n\n  export function submitExam(reqObject) {\n    return async dispatch => {\n        dispatch({\n            type: actionTypes.SUBMIT_EXAM_STARTED\n        });\n        return fetch(`${baseUrl}/get_exams/{mod_id}`,{\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json',\n                'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n            },\n            body: JSON.stringify(reqObject)\n        })\n        .then(response => response.json())\n        .then(payload => {\n            if (payload.Status === 200) {\n                dispatch({\n                    type: actionTypes.SUBMIT_EXAM_SUCCESS,\n                    payload: payload.message\n                })\n            }\n            else {\n                dispatch({\n                    type: actionTypes.SUBMIT_EXAM_FAILED,\n                    error: payload.message\n                })\n            }\n        })\n    }\n  }\n\n  /**\n   * Creates a new exam\n   * @param {Object} reqObject \n   */\n  export function createExam(reqObject) {\n    return async dispatch => {\n        dispatch({\n            type: actionTypes.CREATE_EXAM_STARTED\n        });\n        return fetch(`${baseUrl}/get_exams/{mod_id}`,{\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json',\n                'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n            },\n            body: JSON.stringify(reqObject)\n        })\n        .then(response => response.json())\n        .then(payload => {\n            if (payload.Status === 200) {\n                dispatch({\n                    type: actionTypes.CREATE_EXAM_SUCCESS,\n                    payload: payload.message\n                })\n            }\n            else {\n                dispatch({\n                    type: actionTypes.CREATE_EXAM_FAILED,\n                    error: payload.message\n                })\n            }\n        })\n    }\n  }\n\n  /**\n   * Deletes a particular Exam\n   * @param {Object} reqObject \n   */\n  export function deleteExam(reqObject) {\n    return async dispatch => {\n        dispatch({\n            type: actionTypes.DELETE_EXAM_STARTED\n        });\n        return fetch(`${baseUrl}/get_exams/{mod_id}`,{\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json',\n                'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n            },\n            body: JSON.stringify(reqObject)\n        })\n        .then(response => response.json())\n        .then(payload => {\n            if (payload.Status === 200) {\n                dispatch({\n                    type: actionTypes.DELETE_EXAM_SUCCESS,\n                    payload: payload.message\n                })\n            }\n            else {\n                dispatch({\n                    type: actionTypes.DELETE_EXAM_FAILED,\n                    error: payload.message\n                })\n            }\n        })\n    }\n  }\n\n  /**\n * getExamlist gets a particular exam\n * @param {Object} reqObject \n */\nexport function getExam(reqObject) {\n    return async dispatch => {\n        dispatch({\n            type: actionTypes.GET_EXAM_LIST_STARTED\n        });\n        return fetch(`${baseUrl}/get_exams/{mod_id}`,{\n            method: \"GET\",\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json',\n                'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n            },\n            body: JSON.stringify(reqObject)\n        })\n        .then(response => response.json())\n        .then(payload => {\n            if (payload.Status === 200) {\n                dispatch({\n                    type: actionTypes.GET_EXAM_LIST_SUCCESS,\n                    payload: payload\n                })\n            }\n            else {\n                dispatch({\n                    type: actionTypes.GET_EXAM_LIST_FAILED,\n                    error: payload.message\n                })\n            }\n        })\n    }\n  }\n\n\n"]},"metadata":{},"sourceType":"module"}