{"ast":null,"code":"var _jsxFileName = \"/Users/annuabraham/Documents/GitHub/ENPM613/src/components/flashcards/cardConatiner.js\";\nimport React, { Component } from 'react';\nimport Card from \"./card\";\nimport Immutable from 'immutable';\nimport _ from 'lodash';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { iconMapping } from \"../utils/iconsMapping.js\";\nimport \"./flashcards.css\";\n\nclass CardContainer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      cards: Immutable.fromJS([{\n        word: 'Jazz',\n        description: 'A type of music of black American origin characterized by improvisation, syncopation, and usually a regular or forceful rhythm, emerging at the beginning of the 20th century.'\n      }, {\n        word: 'Reggae',\n        description: 'Music like Bob Marley, man.'\n      }, {\n        word: 'Folk',\n        description: 'Music like Bob Dylan, man.'\n      }]),\n      cardNumber: 0\n    };\n    this.boundShowPrevCard = this.showPrevCard.bind(this);\n    this.boundShowNextCard = this.showNextCard.bind(this);\n  }\n\n  showNextCard() {\n    if (this.state.cardNumber + 1 !== this.state.cards.size) {\n      this.setState({\n        cardNumber: this.state.cardNumber + 1\n      });\n    }\n  }\n\n  showPrevCard() {\n    if (this.state.cardNumber !== 0) {\n      this.setState({\n        cardNumber: this.state.cardNumber - 1\n      });\n    }\n  }\n\n  generateDots() {\n    const times = this.state.cards.size;\n    let arr = [];\n\n    _.times(times).forEach((num, index) => {\n      const dotClass = num === this.state.cardNumber ? 'active' : '';\n      arr.push(React.createElement(FontAwesomeIcon, {\n        icon: iconMapping[\"Circle\"],\n        className: \"card-container__dot fa fa-circle \".concat(dotClass),\n        onClick: () => this.setState({\n          cardNumber: num\n        }),\n        size: \"1x\",\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }));\n    });\n\n    return arr;\n  }\n\n  generateCards() {\n    const cards = this.state.cards;\n    const cardsList = cards.map((card, index) => {\n      return React.createElement(Card, {\n        key: index,\n        frontContent: card.get('word'),\n        backContent: card.get('description'),\n        showNextCard: this.boundShowNextCard,\n        showPrevCard: this.boundShowPrevCard,\n        cardNumber: this.state.cardNumber,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      });\n    });\n    return cardsList.toJS()[this.state.cardNumber];\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, this.generateCards(), React.createElement(\"div\", {\n      className: \"card-container__dots-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, this.generateDots()));\n  }\n\n}\n\nexport default CardContainer;","map":{"version":3,"sources":["/Users/annuabraham/Documents/GitHub/ENPM613/src/components/flashcards/cardConatiner.js"],"names":["React","Component","Card","Immutable","_","FontAwesomeIcon","iconMapping","CardContainer","constructor","state","cards","fromJS","word","description","cardNumber","boundShowPrevCard","showPrevCard","bind","boundShowNextCard","showNextCard","size","setState","generateDots","times","arr","forEach","num","index","dotClass","push","generateCards","cardsList","map","card","get","toJS","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Card from \"./card\";\nimport Immutable from 'immutable';\nimport _ from 'lodash';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { iconMapping } from \"../utils/iconsMapping.js\";\n\nimport \"./flashcards.css\";\n\nclass CardContainer extends Component {\n    constructor() {\n        super();\n        this.state = {\n            cards: Immutable.fromJS([{\n                word: 'Jazz',\n                description: 'A type of music of black American origin characterized by improvisation, syncopation, and usually a regular or forceful rhythm, emerging at the beginning of the 20th century.',\n            }, {\n                word: 'Reggae',\n                description: 'Music like Bob Marley, man.',\n            }, {\n                word: 'Folk',\n                description: 'Music like Bob Dylan, man.',\n            }\n            ]),\n            cardNumber: 0\n        };\n        this.boundShowPrevCard = this.showPrevCard.bind(this);\n        this.boundShowNextCard = this.showNextCard.bind(this);\n    }\n\n    showNextCard() {\n        if ((this.state.cardNumber + 1) !== this.state.cards.size) {\n            this.setState({ cardNumber: this.state.cardNumber + 1 });\n        }\n    }\n\n    showPrevCard() {\n        if (this.state.cardNumber !== 0) {\n            this.setState({ cardNumber: this.state.cardNumber - 1 });\n        }\n    }\n\n    generateDots() {\n        const times = this.state.cards.size;\n        let arr = [];\n        _.times(times).forEach((num, index) => {\n            const dotClass = num === this.state.cardNumber ? 'active' : '';\n            arr.push(\n                <FontAwesomeIcon icon={iconMapping[\"Circle\"]} \n                    className={`card-container__dot fa fa-circle ${dotClass}`}\n                    onClick={() => this.setState({ cardNumber: num })} size=\"1x\" \n                    key ={index}\n                    />\n        )\n        });\n        return arr;\n    }\n\n    generateCards() {\n        const cards = this.state.cards;\n        const cardsList = cards.map((card, index) => {\n            return (\n                <Card\n                    key={index}\n                    frontContent={card.get('word')}\n                    backContent={card.get('description')}\n                    showNextCard={this.boundShowNextCard}\n                    showPrevCard={this.boundShowPrevCard}\n                    cardNumber={this.state.cardNumber}\n                />\n            );\n        })\n        return (cardsList.toJS()[this.state.cardNumber]);\n    }\n    render() {\n        return (\n            <div>\n                {this.generateCards()}\n                <div className='card-container__dots-wrapper'>\n                    {this.generateDots()}\n                </div>\n            </div>\n        );\n    }\n}\nexport default CardContainer;"]},"metadata":{},"sourceType":"module"}