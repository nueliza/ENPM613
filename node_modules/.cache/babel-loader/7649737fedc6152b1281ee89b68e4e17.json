{"ast":null,"code":"/**\n * Contains all the service handlers for exam related actions\n */\nimport * as actionTypes from \"./actionTypes\";\nconst baseUrl = \"https://get-sat-pro.herokuapp.com/api\";\n/**\n * getExamlist gets the list of exams for a particular module\n * @param {Object} reqObject \n */\n\nexport function getExamList(reqObject) {\n  return async dispatch => {\n    dispatch({\n      type: actionTypes.GET_EXAM_LIST_STARTED\n    });\n    return fetch(\"\".concat(baseUrl, \"/get_exams/{mod_id}\"), {\n      method: \"GET\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': \"Bearer \".concat(localStorage.getItem(\"token\"))\n      },\n      body: JSON.stringify(reqObject)\n    }).then(response => response.json()).then(payload => {\n      if (payload.Status === 200) {\n        dispatch({\n          type: actionTypes.GET_EXAM_LIST_SUCCESS,\n          payload: payload\n        });\n      } else {\n        dispatch({\n          type: actionTypes.GET_EXAM_LIST_FAILED,\n          error: payload.message\n        });\n      }\n    });\n  };\n}\n/**\n * submitExam submits the exam taken by the student\n * @param {Object} reqObject \n */\n\nexport function submitExam(reqObject) {\n  return async dispatch => {\n    dispatch({\n      type: actionTypes.SUBMIT_EXAM_STARTED\n    });\n    return fetch(\"\".concat(baseUrl, \"/get_exams/{mod_id}\"), {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': \"Bearer \".concat(localStorage.getItem(\"token\"))\n      },\n      body: JSON.stringify(reqObject)\n    }).then(response => response.json()).then(payload => {\n      if (payload.Status === 200) {\n        dispatch({\n          type: actionTypes.SUBMIT_EXAM_SUCCESS,\n          payload: payload.message\n        });\n      } else {\n        dispatch({\n          type: actionTypes.SUBMIT_EXAM_FAILED,\n          error: payload.message\n        });\n      }\n    });\n  };\n}\n/**\n * Creates a new exam\n * @param {Object} reqObject \n */\n\nexport function createExam(reqObject) {\n  return async dispatch => {\n    dispatch({\n      type: actionTypes.CREATE_EXAM_STARTED\n    });\n    return fetch(\"\".concat(baseUrl, \"/get_exams/{mod_id}\"), {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': \"Bearer \".concat(localStorage.getItem(\"token\"))\n      },\n      body: JSON.stringify(reqObject)\n    }).then(response => response.json()).then(payload => {\n      if (payload.Status === 200) {\n        console.log(\"submitExam\", payload);\n        dispatch({\n          type: actionTypes.CREATE_EXAM_SUCCESS,\n          payload: payload.message\n        });\n      } else {\n        console.log(\"submitExam\", payload);\n        dispatch({\n          type: actionTypes.CREATE_EXAM_FAILED,\n          error: payload.message\n        });\n      }\n    });\n  };\n}\n/**\n * Deletes a particular Exam\n * @param {Object} reqObject \n */\n\nexport function deleteExam(reqObject) {\n  return async dispatch => {\n    dispatch({\n      type: actionTypes.DELETE_EXAM_STARTED\n    });\n    return fetch(\"\".concat(baseUrl, \"/get_exams/{mod_id}\"), {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': \"Bearer \".concat(localStorage.getItem(\"token\"))\n      },\n      body: JSON.stringify(reqObject)\n    }).then(response => response.json()).then(payload => {\n      if (payload.Status === 200) {\n        console.log(\"submitExam\", payload);\n        dispatch({\n          type: actionTypes.DELETE_EXAM_SUCCESS,\n          payload: payload.message\n        });\n      } else {\n        console.log(\"submitExam\", payload);\n        dispatch({\n          type: actionTypes.DELETE_EXAM_FAILED,\n          error: payload.message\n        });\n      }\n    });\n  };\n}\n/**\n* getExamlist gets a particular exam\n* @param {Object} reqObject \n*/\n\nexport function getExam(reqObject) {\n  return async dispatch => {\n    dispatch({\n      type: actionTypes.GET_EXAM_LIST_STARTED\n    });\n    return fetch(\"\".concat(baseUrl, \"/get_exams/{mod_id}\"), {\n      method: \"GET\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': \"Bearer \".concat(localStorage.getItem(\"token\"))\n      },\n      body: JSON.stringify(reqObject)\n    }).then(response => response.json()).then(payload => {\n      if (payload.Status === 200) {\n        console.log(\"getExamList\", payload);\n        dispatch({\n          type: actionTypes.GET_EXAM_LIST_SUCCESS,\n          payload: payload\n        });\n      } else {\n        console.log(\"getExamList\", payload);\n        dispatch({\n          type: actionTypes.GET_EXAM_LIST_FAILED,\n          error: payload.message\n        });\n      }\n    });\n  };\n}","map":{"version":3,"sources":["/Users/annuabraham/Documents/GitHub/ENPM613/client/src/actions/examHandler.js"],"names":["actionTypes","baseUrl","getExamList","reqObject","dispatch","type","GET_EXAM_LIST_STARTED","fetch","method","headers","localStorage","getItem","body","JSON","stringify","then","response","json","payload","Status","GET_EXAM_LIST_SUCCESS","GET_EXAM_LIST_FAILED","error","message","submitExam","SUBMIT_EXAM_STARTED","SUBMIT_EXAM_SUCCESS","SUBMIT_EXAM_FAILED","createExam","CREATE_EXAM_STARTED","console","log","CREATE_EXAM_SUCCESS","CREATE_EXAM_FAILED","deleteExam","DELETE_EXAM_STARTED","DELETE_EXAM_SUCCESS","DELETE_EXAM_FAILED","getExam"],"mappings":"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","sourcesContent":["/**\n * Contains all the service handlers for exam related actions\n */\n\nimport * as actionTypes from \"./actionTypes\";\n\nconst baseUrl = \"https://get-sat-pro.herokuapp.com/api\";\n\n/**\n * getExamlist gets the list of exams for a particular module\n * @param {Object} reqObject \n */\nexport function getExamList(reqObject) {\n    return async dispatch => {\n        dispatch({\n            type: actionTypes.GET_EXAM_LIST_STARTED\n        });\n        return fetch(`${baseUrl}/get_exams/{mod_id}`,{\n            method: \"GET\",\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json',\n                'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n            },\n            body: JSON.stringify(reqObject)\n        })\n        .then(response => response.json())\n        .then(payload => {\n            if (payload.Status === 200) {\n                dispatch({\n                    type: actionTypes.GET_EXAM_LIST_SUCCESS,\n                    payload: payload\n                })\n            }\n            else {\n                dispatch({\n                    type: actionTypes.GET_EXAM_LIST_FAILED,\n                    error: payload.message\n                })\n            }\n        })\n    }\n  }\n\n  /**\n   * submitExam submits the exam taken by the student\n   * @param {Object} reqObject \n   */\n\n  export function submitExam(reqObject) {\n    return async dispatch => {\n        dispatch({\n            type: actionTypes.SUBMIT_EXAM_STARTED\n        });\n        return fetch(`${baseUrl}/get_exams/{mod_id}`,{\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json',\n                'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n            },\n            body: JSON.stringify(reqObject)\n        })\n        .then(response => response.json())\n        .then(payload => {\n            if (payload.Status === 200) {\n                dispatch({\n                    type: actionTypes.SUBMIT_EXAM_SUCCESS,\n                    payload: payload.message\n                })\n            }\n            else {\n                dispatch({\n                    type: actionTypes.SUBMIT_EXAM_FAILED,\n                    error: payload.message\n                })\n            }\n        })\n    }\n  }\n\n  /**\n   * Creates a new exam\n   * @param {Object} reqObject \n   */\n  export function createExam(reqObject) {\n    return async dispatch => {\n        dispatch({\n            type: actionTypes.CREATE_EXAM_STARTED\n        });\n        return fetch(`${baseUrl}/get_exams/{mod_id}`,{\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json',\n                'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n            },\n            body: JSON.stringify(reqObject)\n        })\n        .then(response => response.json())\n        .then(payload => {\n            if (payload.Status === 200) {\n                console.log(\"submitExam\", payload);\n                dispatch({\n                    type: actionTypes.CREATE_EXAM_SUCCESS,\n                    payload: payload.message\n                })\n            }\n            else {\n                console.log(\"submitExam\", payload);\n                dispatch({\n                    type: actionTypes.CREATE_EXAM_FAILED,\n                    error: payload.message\n                })\n            }\n        })\n    }\n  }\n\n  /**\n   * Deletes a particular Exam\n   * @param {Object} reqObject \n   */\n  export function deleteExam(reqObject) {\n    return async dispatch => {\n        dispatch({\n            type: actionTypes.DELETE_EXAM_STARTED\n        });\n        return fetch(`${baseUrl}/get_exams/{mod_id}`,{\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json',\n                'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n            },\n            body: JSON.stringify(reqObject)\n        })\n        .then(response => response.json())\n        .then(payload => {\n            if (payload.Status === 200) {\n                console.log(\"submitExam\", payload);\n                dispatch({\n                    type: actionTypes.DELETE_EXAM_SUCCESS,\n                    payload: payload.message\n                })\n            }\n            else {\n                console.log(\"submitExam\", payload);\n                dispatch({\n                    type: actionTypes.DELETE_EXAM_FAILED,\n                    error: payload.message\n                })\n            }\n        })\n    }\n  }\n\n  /**\n * getExamlist gets a particular exam\n * @param {Object} reqObject \n */\nexport function getExam(reqObject) {\n    return async dispatch => {\n        dispatch({\n            type: actionTypes.GET_EXAM_LIST_STARTED\n        });\n        return fetch(`${baseUrl}/get_exams/{mod_id}`,{\n            method: \"GET\",\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json',\n                'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n            },\n            body: JSON.stringify(reqObject)\n        })\n        .then(response => response.json())\n        .then(payload => {\n            if (payload.Status === 200) {\n                console.log(\"getExamList\", payload);\n                dispatch({\n                    type: actionTypes.GET_EXAM_LIST_SUCCESS,\n                    payload: payload\n                })\n            }\n            else {\n                console.log(\"getExamList\", payload);\n                dispatch({\n                    type: actionTypes.GET_EXAM_LIST_FAILED,\n                    error: payload.message\n                })\n            }\n        })\n    }\n  }\n\n\n"]},"metadata":{},"sourceType":"module"}