{"ast":null,"code":"var SCClientSocket = require('./scclientsocket');\n\nvar scErrors = require('sc-errors');\n\nvar uuid = require('uuid');\n\nvar InvalidArgumentsError = scErrors.InvalidArgumentsError;\nvar _clients = {};\n\nfunction getMultiplexId(options) {\n  var protocolPrefix = options.secure ? 'https://' : 'http://';\n  var queryString = '';\n\n  if (options.query) {\n    if (typeof options.query === 'string') {\n      queryString = options.query;\n    } else {\n      var queryArray = [];\n      var queryMap = options.query;\n\n      for (var key in queryMap) {\n        if (queryMap.hasOwnProperty(key)) {\n          queryArray.push(key + '=' + queryMap[key]);\n        }\n      }\n\n      if (queryArray.length) {\n        queryString = '?' + queryArray.join('&');\n      }\n    }\n  }\n\n  var host;\n\n  if (options.host) {\n    host = options.host;\n  } else {\n    host = options.hostname + ':' + options.port;\n  }\n\n  return protocolPrefix + host + options.path + queryString;\n}\n\nfunction isUrlSecure() {\n  return global.location && location.protocol === 'https:';\n}\n\nfunction getPort(options, isSecureDefault) {\n  var isSecure = options.secure == null ? isSecureDefault : options.secure;\n  return options.port || (global.location && location.port ? location.port : isSecure ? 443 : 80);\n}\n\nfunction create(options) {\n  var self = this;\n  options = options || {};\n\n  if (options.host && !options.host.match(/[^:]+:\\d{2,5}/)) {\n    throw new InvalidArgumentsError('The host option should include both' + ' the hostname and the port number in the format \"hostname:port\"');\n  }\n\n  if (options.host && options.hostname) {\n    throw new InvalidArgumentsError('The host option should already include' + ' the hostname and the port number in the format \"hostname:port\"' + ' - Because of this, you should never use host and hostname options together');\n  }\n\n  if (options.host && options.port) {\n    throw new InvalidArgumentsError('The host option should already include' + ' the hostname and the port number in the format \"hostname:port\"' + ' - Because of this, you should never use host and port options together');\n  }\n\n  var isSecureDefault = isUrlSecure();\n  var opts = {\n    port: getPort(options, isSecureDefault),\n    hostname: global.location && location.hostname || 'localhost',\n    path: '/socketcluster/',\n    secure: isSecureDefault,\n    autoConnect: true,\n    autoReconnect: true,\n    autoSubscribeOnConnect: true,\n    connectTimeout: 20000,\n    ackTimeout: 10000,\n    timestampRequests: false,\n    timestampParam: 't',\n    authEngine: null,\n    authTokenName: 'socketCluster.authToken',\n    binaryType: 'arraybuffer',\n    multiplex: true,\n    pubSubBatchDuration: null,\n    cloneData: false\n  };\n\n  for (var i in options) {\n    if (options.hasOwnProperty(i)) {\n      opts[i] = options[i];\n    }\n  }\n\n  opts.clientMap = _clients;\n\n  if (opts.multiplex === false) {\n    opts.clientId = uuid.v4();\n    var socket = new SCClientSocket(opts);\n    _clients[opts.clientId] = socket;\n    return socket;\n  }\n\n  opts.clientId = getMultiplexId(opts);\n\n  if (_clients[opts.clientId]) {\n    if (opts.autoConnect) {\n      _clients[opts.clientId].connect();\n    }\n  } else {\n    _clients[opts.clientId] = new SCClientSocket(opts);\n  }\n\n  return _clients[opts.clientId];\n}\n\nfunction destroy(socket) {\n  socket.destroy();\n}\n\nmodule.exports = {\n  create: create,\n  destroy: destroy,\n  clients: _clients\n};","map":null,"metadata":{},"sourceType":"script"}