{"ast":null,"code":"import * as actions from \"./actions\";\nimport * as actionTypes from \"./actionTypes\";\nconst baseUrl = \"https://get-sat-pro.herokuapp.com/\";\nexport function loginUser(user) {\n  return dispatch => {\n    dispatch(actions.loginStarted());\n    return fetch(\"\".concat(baseUrl, \"/login\"), {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      },\n      body: JSON.stringify(user)\n    }).then(resp => resp.json()).then(payload => {\n      if (payload.Status === 200) {\n        localStorage.setItem(\"token\", payload.token);\n        dispatch(actions.loginSuccess(payload));\n      } else {\n        dispatch(actions.loginFailed(payload.message));\n      }\n    });\n  };\n}\nexport function registerUser(registerData) {\n  return dispatch => {\n    dispatch(actions.registrationStarted()); //TODO service call for register\n\n    return fetch(\"\".concat(baseUrl, \"/register\"), {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      },\n      body: JSON.stringify(registerData)\n    }).then(resp => resp.json()).then(payload => {\n      if (payload.Status === 200) {\n        dispatch(actions.registrationSuccess);\n      } else {\n        dispatch(actions.registrationFailed);\n      }\n    });\n  };\n}\nexport function logoutUser(user) {\n  return dispatch => {\n    dispatch(actions.loginStarted());\n    return fetch(\"\".concat(baseUrl, \"/login\"), {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      },\n      body: JSON.stringify(user)\n    }).then(resp => resp.json()).then(payload => {\n      if (payload.Status === 200) {\n        localStorage.setItem(\"token\", payload.token);\n        dispatch(actions.loginSuccess(payload));\n      } else {\n        dispatch(actions.loginFailed(payload.message));\n      }\n    });\n  };\n}\nexport const setSelectedModule = data => {\n  return {\n    type: actionTypes.SET_SELECTED_MODULE,\n    payload: data\n  };\n};","map":{"version":3,"sources":["/Users/annuabraham/Documents/GitHub/ENPM613/client/src/actions/userActions.js"],"names":["actions","actionTypes","baseUrl","loginUser","user","dispatch","loginStarted","fetch","method","headers","body","JSON","stringify","then","resp","json","payload","Status","localStorage","setItem","token","loginSuccess","loginFailed","message","registerUser","registerData","registrationStarted","registrationSuccess","registrationFailed","logoutUser","setSelectedModule","data","type","SET_SELECTED_MODULE"],"mappings":"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","sourcesContent":["import * as actions from \"./actions\";\nimport * as actionTypes from \"./actionTypes\";\n\nconst baseUrl = \"https://get-sat-pro.herokuapp.com/\";\n\nexport function loginUser(user) {\n    return dispatch =>{\n        dispatch(actions.loginStarted());\n        return fetch(`${baseUrl}/login`, {\n            method: \"POST\",\n            headers:{\n                'Content-Type':'application/json',\n                'Accept': 'application/json',\n            },\n            body: JSON.stringify(user)\n        })\n        .then(resp => resp.json())\n        .then(payload =>{\n            if(payload.Status === 200){\n                localStorage.setItem(\"token\", payload.token)\n                dispatch(actions.loginSuccess(payload));\n            }\n            else{\n                dispatch(actions.loginFailed(payload.message));\n            }\n        })\n    }\n}\n\nexport function registerUser(registerData) {\n    return dispatch =>{\n        dispatch(actions.registrationStarted());\n        //TODO service call for register\n        return fetch(`${baseUrl}/register`, {\n            method: \"POST\",\n            headers:{\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            },\n            body: JSON.stringify(registerData)\n        })\n        .then(resp => resp.json())\n        .then(payload =>{\n            if(payload.Status === 200){\n                dispatch(actions.registrationSuccess);\n            }\n            else{\n                dispatch(actions.registrationFailed);\n            }\n        })\n    }\n    \n}\n\nexport function logoutUser(user) {\n    return dispatch =>{\n        dispatch(actions.loginStarted());\n        return fetch(`${baseUrl}/login`, {\n            method: \"POST\",\n            headers:{\n                'Content-Type':'application/json',\n                'Accept': 'application/json',\n            },\n            body: JSON.stringify(user)\n        })\n        .then(resp => resp.json())\n        .then(payload =>{\n            if(payload.Status === 200){\n                localStorage.setItem(\"token\", payload.token)\n                dispatch(actions.loginSuccess(payload));\n            }\n            else{\n                dispatch(actions.loginFailed(payload.message));\n            }\n        })\n    }\n}\n\n\n\nexport const setSelectedModule = (data) =>{\n    return{\n        type: actionTypes.SET_SELECTED_MODULE,\n        payload: data\n    }\n\n}\n"]},"metadata":{},"sourceType":"module"}