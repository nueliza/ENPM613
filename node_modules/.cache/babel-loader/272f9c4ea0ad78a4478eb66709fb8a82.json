{"ast":null,"code":"var pathGetter = require('./path-getter');\n\nvar jsan = require('./');\n\nexports.getRegexFlags = function getRegexFlags(regex) {\n  var flags = '';\n  if (regex.ignoreCase) flags += 'i';\n  if (regex.global) flags += 'g';\n  if (regex.multiline) flags += 'm';\n  return flags;\n};\n\nexports.stringifyFunction = function stringifyFunction(fn, customToString) {\n  if (typeof customToString === 'function') {\n    return customToString(fn);\n  }\n\n  var str = fn.toString();\n  var match = str.match(/^[^{]*{|^[^=]*=>/);\n  var start = match ? match[0] : '<function> ';\n  var end = str[str.length - 1] === '}' ? '}' : '';\n  return start.replace(/\\r\\n|\\n/g, ' ').replace(/\\s+/g, ' ') + ' /* ... */ ' + end;\n};\n\nexports.restore = function restore(obj, root) {\n  var type = obj[0];\n  var rest = obj.slice(1);\n\n  switch (type) {\n    case '$':\n      return pathGetter(root, obj);\n\n    case 'r':\n      var comma = rest.indexOf(',');\n      var flags = rest.slice(0, comma);\n      var source = rest.slice(comma + 1);\n      return RegExp(source, flags);\n\n    case 'd':\n      return new Date(+rest);\n\n    case 'f':\n      var fn = function () {\n        throw new Error(\"can't run jsan parsed function\");\n      };\n\n      fn.toString = function () {\n        return rest;\n      };\n\n      return fn;\n\n    case 'u':\n      return undefined;\n\n    case 'e':\n      var error = new Error(rest);\n      error.stack = 'Stack is unavailable for jsan parsed errors';\n      return error;\n\n    case 's':\n      return Symbol(rest);\n\n    case 'g':\n      return Symbol.for(rest);\n\n    case 'm':\n      return new Map(jsan.parse(rest));\n\n    case 'l':\n      return new Set(jsan.parse(rest));\n\n    case 'n':\n      return NaN;\n\n    case 'i':\n      return Infinity;\n\n    case 'y':\n      return -Infinity;\n\n    default:\n      console.warn('unknown type', obj);\n      return obj;\n  }\n};","map":null,"metadata":{},"sourceType":"script"}