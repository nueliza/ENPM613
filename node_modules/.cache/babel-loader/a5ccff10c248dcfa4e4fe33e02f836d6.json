{"ast":null,"code":"var _jsxFileName = \"/Users/annuabraham/Documents/GitHub/ENPM613/client/src/components/exams/createExam.js\";\nimport React, { Component } from 'react';\nimport { iconMapping } from \"../utils/iconsMapping.js\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport \"./exams.css\";\nimport Modal from \"../model\";\nimport ErrorMessage from \"../ErrorMessage\";\n\nconst QuestionInput = props => {\n  return props.Exam.map((item, id) => {\n    let questionId = \"qn-\".concat(id),\n        answerId = \"ans-\".concat(id);\n    return React.createElement(\"div\", {\n      className: \"questionWrapper\",\n      key: id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }, \"Question number \", id + 1), React.createElement(\"input\", {\n      type: \"text\",\n      name: \"question\",\n      \"data-id\": id,\n      id: questionId,\n      className: \"inputField\",\n      placeholder: \"Type Question here...\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    }), React.createElement(ErrorMessage, {\n      content: this.state.errors.question,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    })), id > 0 ? React.createElement(FontAwesomeIcon, {\n      className: \"icon\",\n      \"data-id\": id,\n      onClick: props.deleteQuestion,\n      icon: iconMapping[\"Trash\"],\n      size: \"1x\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }) : '', React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }), React.createElement(OptionsInput, {\n      item: item,\n      id: id,\n      deleteOption: props.deleteOption,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      onClick: props.addOption,\n      \"data-id\": id,\n      className: \"btn btn-info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, React.createElement(FontAwesomeIcon, {\n      icon: iconMapping[\"Plus\"],\n      size: \"1x\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }), \"\\xA0Add Option\"), React.createElement(\"div\", {\n      className: \"group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, \" Correct Answer\"), React.createElement(\"input\", {\n      type: \"text\",\n      name: \"answer\",\n      \"data-id\": id,\n      id: answerId,\n      className: \"answer\",\n      placeholder: \"Type correct answer here...\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    })));\n  });\n};\n\nconst OptionsInput = props => {\n  return props.item.options.map((val, idx) => {\n    //let optionId = `opt-${props.id}-${idx}`;\n    return React.createElement(\"div\", {\n      className: \"optionsWrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, \" Option \", idx + 1), React.createElement(\"input\", {\n      type: \"text\",\n      className: \"inputField\",\n      name: \"options\",\n      \"data-id\": props.id,\n      id: idx,\n      placeholder: \"Type Option here...\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    })), idx > 1 ? React.createElement(FontAwesomeIcon, {\n      \"data-id\": props.id,\n      className: \"icon\",\n      name: idx,\n      id: idx,\n      onClick: props.deleteOption,\n      icon: iconMapping[\"Trash\"],\n      size: \"1x\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }) : '');\n  });\n};\n\nclass CreateExam extends Component {\n  constructor(props) {\n    super(props);\n\n    this.addQuestion = e => {\n      e.preventDefault();\n\n      if (this.state.Exam.length === 20) {\n        this.setState({\n          showModal: true,\n          modalContent: \"You have reached the maximum number of questions\",\n          modalError: true\n        });\n      } else {\n        this.setState(prevState => ({\n          Exam: [...prevState.Exam, {\n            question: \"\",\n            options: [\"\", \"\"],\n            answer: \"\"\n          }]\n        }));\n      }\n    };\n\n    this.addOption = e => {\n      e.preventDefault();\n      let id = e.target.dataset.id;\n      let updatedExam = this.state.Exam;\n\n      if (updatedExam[id].options.length === 4) {\n        this.setState({\n          showModal: true,\n          modalContent: \"You have reached the maximum number of options for a question\",\n          modalError: true\n        });\n      } else {\n        updatedExam[id].options = [...updatedExam[id].options, \"\"];\n        this.setState({\n          Exam: updatedExam\n        });\n      }\n    };\n\n    this.deleteQuestion = e => {\n      let questionId = e.currentTarget.dataset.id;\n      var updatedExam = this.state.Exam;\n      updatedExam.splice(questionId, 1);\n      this.setState({\n        Exam: updatedExam\n      });\n    };\n\n    this.deleteOption = e => {\n      let questionId = e.currentTarget.dataset.id;\n      let optionId = e.currentTarget.id;\n      var updatedExam = this.state.Exam;\n      updatedExam[questionId].options.splice(optionId, 1);\n      this.setState({\n        Exam: updatedExam\n      });\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault(); //TODO: Input field validations\n\n      isValidData();\n      this.props.createExam(this.state.Exam);\n      this.props.history.push(\"/exams\");\n    };\n\n    this.handleChange = e => {\n      let Exam = [...this.state.Exam];\n\n      if (e.target.name === \"options\") {\n        Exam[e.target.dataset.id][\"options\"][e.target.id] = e.target.value;\n      } else {\n        Exam[e.target.dataset.id][e.target.name] = e.target.value;\n      }\n\n      this.setState({\n        Exam\n      });\n    };\n\n    this.state = {\n      Exam: [{\n        question: \"\",\n        options: [\"\", \"\"],\n        answer: \"\"\n      }],\n      showModal: false,\n      modalContent: \"\",\n      modalError: false,\n      errors: {\n        question: \"\",\n        option: \"Exam Option is required\",\n        answer: \"Correct Answer is required\"\n      }\n    };\n  }\n\n  render() {\n    //<h3>Create {this.props.location.state.selectedSubModule} Exam</h3>\n    return React.createElement(\"div\", {\n      className: \"dashboard_body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, \"Create Exam for Algebra\"), React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, React.createElement(QuestionInput, {\n      Exam: this.state.Exam,\n      addOption: this.addOption,\n      deleteOption: this.deleteOption,\n      deleteQuestion: this.deleteQuestion,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.addQuestion,\n      className: \"btn btn-info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, React.createElement(FontAwesomeIcon, {\n      icon: iconMapping[\"Plus\"],\n      size: \"1x\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }), \"\\xA0Add Question\"), \"\\xA0\\xA0\", React.createElement(\"button\", {\n      className: \"btn btn-success\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, \"Submit\"), React.createElement(Modal, {\n      isVisible: this.state.showModal,\n      onCloseModal: () => {\n        this.setState({\n          showModal: false\n        });\n      },\n      modalContent: this.state.modalContent,\n      modalError: this.state.modalError,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default CreateExam;","map":{"version":3,"sources":["/Users/annuabraham/Documents/GitHub/ENPM613/client/src/components/exams/createExam.js"],"names":["React","Component","iconMapping","FontAwesomeIcon","Modal","ErrorMessage","QuestionInput","props","Exam","map","item","id","questionId","answerId","state","errors","question","deleteQuestion","deleteOption","addOption","OptionsInput","options","val","idx","CreateExam","constructor","addQuestion","e","preventDefault","length","setState","showModal","modalContent","modalError","prevState","answer","target","dataset","updatedExam","currentTarget","splice","optionId","handleSubmit","isValidData","createExam","history","push","handleChange","name","value","option","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { iconMapping } from \"../utils/iconsMapping.js\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport \"./exams.css\";\nimport Modal from \"../model\";\nimport ErrorMessage from \"../ErrorMessage\";\n\nconst QuestionInput = (props) => {\n    return (\n        props.Exam.map((item, id) => {\n            let questionId = `qn-${id}`, answerId = `ans-${id}`\n            return (\n                <div className=\"questionWrapper\" key={id}>\n                    <div className=\"group\">\n                        <span className=\"label\">Question number {id + 1}</span>\n                        <input type=\"text\"\n                            name=\"question\"\n                            data-id={id}\n                            id={questionId}\n                            className=\"inputField\"\n                            placeholder=\"Type Question here...\"\n                        />\n                        <ErrorMessage content={this.state.errors.question} />\n                    </div>\n                    {id > 0 ? <FontAwesomeIcon\n                        className=\"icon\"\n                        data-id={id}\n                        onClick={props.deleteQuestion}\n                        icon={iconMapping[\"Trash\"]}\n                        size=\"1x\" /> : ''}\n                    <br />\n                    <OptionsInput item={item} id={id} deleteOption={props.deleteOption}/>\n                    <br />\n\n                    <div onClick={props.addOption} data-id={id} className=\"btn btn-info\">\n                        <FontAwesomeIcon\n                            icon={iconMapping[\"Plus\"]}\n                            size=\"1x\" />\n                        &nbsp;Add Option\n                    </div>\n                    <div className=\"group\">\n                        <span className=\"label\"> Correct Answer</span>\n                        <input type=\"text\"\n                            name=\"answer\"\n                            data-id={id}\n                            id={answerId}\n                            className=\"answer\"\n                            placeholder=\"Type correct answer here...\"\n                        />\n                    </div>\n                </div>\n            )\n        })\n    )\n}\n\nconst OptionsInput = (props) => {\n    return (\n        props.item.options.map((val, idx) => {\n            //let optionId = `opt-${props.id}-${idx}`;\n            return (\n                <div className=\"optionsWrapper\">\n                    <div className=\"group\">\n                        <span className=\"label\"> Option {idx + 1}</span>\n                        <input type=\"text\"\n                            className=\"inputField\"\n                            name=\"options\"\n                            data-id={props.id}\n                            id={idx}\n                            placeholder=\"Type Option here...\"\n                        />\n                    </div>\n                    {idx > 1 ? <FontAwesomeIcon\n                        data-id={props.id}\n                        className=\"icon\"\n                        name={idx}\n                        id={idx}\n                        onClick={props.deleteOption}\n                        icon={iconMapping[\"Trash\"]}\n                        size=\"1x\" /> : ''}\n                </div>\n            )\n        })\n    )\n}\nclass CreateExam extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            Exam: [{ question: \"\", options: [\"\", \"\"], answer: \"\" }],\n            showModal: false,\n            modalContent: \"\",\n            modalError: false,\n            errors: {question: \"\", option: \"Exam Option is required\", answer: \"Correct Answer is required\" }\n        }\n    }\n\n    addQuestion = (e) => {\n        e.preventDefault()\n        if(this.state.Exam.length === 20){\n            this.setState({\n                showModal : true, \n                modalContent : \"You have reached the maximum number of questions\",\n                modalError: true\n            })\n        }\n        else{\n            this.setState((prevState) => ({\n                Exam: [...prevState.Exam, { question: \"\", options: [\"\", \"\"], answer: \"\" }]\n            }));\n        }\n        \n    }\n\n    addOption = (e) => {\n        e.preventDefault()\n        let id = e.target.dataset.id;\n        let updatedExam = this.state.Exam;\n        if(updatedExam[id].options.length === 4 ){\n            this.setState({\n                showModal : true, \n                modalContent : \"You have reached the maximum number of options for a question\",\n                modalError: true\n            })\n        }\n         else{\n            updatedExam[id].options = [...updatedExam[id].options, \"\"];\n            this.setState({ Exam: updatedExam });\n         }\n    }\n\n    deleteQuestion = (e) => {\n        let questionId = e.currentTarget.dataset.id;\n        var updatedExam = this.state.Exam;\n        updatedExam.splice(questionId, 1)\n        this.setState({ Exam: updatedExam });\n    }\n\n    deleteOption = (e) => {\n        let questionId = e.currentTarget.dataset.id;\n        let optionId = e.currentTarget.id;\n        var updatedExam = this.state.Exam;\n        updatedExam[questionId].options.splice(optionId, 1);\n        this.setState({ Exam: updatedExam })\n\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        //TODO: Input field validations\n        isValidData()\n        this.props.createExam(this.state.Exam);\n        this.props.history.push(\"/exams\")\n        \n    }\n\n    // validateField = (fieldValue, fieldType) =>{\n    //     let errors = this.state.errors;\n    //     if(fieldValue === \"\"){\n    //         errors[fieldType] = `Discussion ${fieldType} is required`;\n    //         this.setState({errors: errors,formValid: false});\n    //     }\n    //     else{\n    //         errors[fieldType] = \"\";\n    //         this.setState({errors: errors, formValid: true})\n    //     }\n    // }\n\n    handleChange = (e) => {\n        let Exam = [...this.state.Exam]\n        if (e.target.name === \"options\") {\n            Exam[e.target.dataset.id][\"options\"][e.target.id] = e.target.value;\n        } else {\n            Exam[e.target.dataset.id][e.target.name] = e.target.value;\n        }\n        this.setState({ Exam });\n    }\n\n    render() {\n        //<h3>Create {this.props.location.state.selectedSubModule} Exam</h3>\n        return (\n            <div className=\"dashboard_body\">\n                <h3>Create Exam for Algebra</h3>\n                <form onSubmit={this.handleSubmit} onChange={this.handleChange}>\n                    <QuestionInput\n                        Exam={this.state.Exam}\n                        addOption={this.addOption}\n                        deleteOption={this.deleteOption}\n                        deleteQuestion={this.deleteQuestion}\n                    />\n                    <br />\n                    <button onClick={this.addQuestion} className=\"btn btn-info\">\n                        <FontAwesomeIcon icon={iconMapping[\"Plus\"]} size=\"1x\" />\n                        &nbsp;Add Question\n                    </button>\n                    &nbsp;&nbsp;\n                    <button className=\"btn btn-success\" >\n                        Submit\n                    </button>\n                    <Modal \n                        isVisible = {this.state.showModal} \n                        onCloseModal = {()=>{this.setState({ showModal :false} )}} \n                        modalContent = {this.state.modalContent}\n                        modalError = {this.state.modalError}\n                        />\n                </form>\n            </div>\n        )\n    }\n}\nexport default CreateExam;"]},"metadata":{},"sourceType":"module"}