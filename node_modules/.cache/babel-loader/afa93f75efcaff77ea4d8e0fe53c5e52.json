{"ast":null,"code":"var Emitter = require('component-emitter');\n\nvar SCChannel = function (name, client, options) {\n  var self = this;\n  Emitter.call(this);\n  this.PENDING = 'pending';\n  this.SUBSCRIBED = 'subscribed';\n  this.UNSUBSCRIBED = 'unsubscribed';\n  this.name = name;\n  this.state = this.UNSUBSCRIBED;\n  this.client = client;\n  this.options = options || {};\n  this.setOptions(this.options);\n};\n\nSCChannel.prototype = Object.create(Emitter.prototype);\n\nSCChannel.prototype.setOptions = function (options) {\n  if (!options) {\n    options = {};\n  }\n\n  this.waitForAuth = options.waitForAuth || false;\n  this.batch = options.batch || false;\n\n  if (options.data !== undefined) {\n    this.data = options.data;\n  }\n};\n\nSCChannel.prototype.getState = function () {\n  return this.state;\n};\n\nSCChannel.prototype.subscribe = function (options) {\n  this.client.subscribe(this.name, options);\n};\n\nSCChannel.prototype.unsubscribe = function () {\n  this.client.unsubscribe(this.name);\n};\n\nSCChannel.prototype.isSubscribed = function (includePending) {\n  return this.client.isSubscribed(this.name, includePending);\n};\n\nSCChannel.prototype.publish = function (data, callback) {\n  this.client.publish(this.name, data, callback);\n};\n\nSCChannel.prototype.watch = function (handler) {\n  this.client.watch(this.name, handler);\n};\n\nSCChannel.prototype.unwatch = function (handler) {\n  this.client.unwatch(this.name, handler);\n};\n\nSCChannel.prototype.watchers = function () {\n  return this.client.watchers(this.name);\n};\n\nSCChannel.prototype.destroy = function () {\n  this.client.destroyChannel(this.name);\n};\n\nmodule.exports.SCChannel = SCChannel;","map":null,"metadata":{},"sourceType":"script"}