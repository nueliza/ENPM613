{"ast":null,"code":"var Emitter = require('component-emitter');\n\nvar SCChannel = require('sc-channel').SCChannel;\n\nvar Response = require('./response').Response;\n\nvar AuthEngine = require('./auth').AuthEngine;\n\nvar formatter = require('sc-formatter');\n\nvar SCTransport = require('./sctransport').SCTransport;\n\nvar querystring = require('querystring');\n\nvar LinkedList = require('linked-list');\n\nvar Buffer = require('buffer/').Buffer;\n\nvar clone = require('clone');\n\nvar scErrors = require('sc-errors');\n\nvar InvalidArgumentsError = scErrors.InvalidArgumentsError;\nvar InvalidMessageError = scErrors.InvalidMessageError;\nvar InvalidActionError = scErrors.InvalidActionError;\nvar SocketProtocolError = scErrors.SocketProtocolError;\nvar TimeoutError = scErrors.TimeoutError;\nvar BadConnectionError = scErrors.BadConnectionError;\nvar isBrowser = typeof window !== 'undefined';\n\nvar SCClientSocket = function (opts) {\n  var self = this;\n  Emitter.call(this);\n  this.id = null;\n  this.state = this.CLOSED;\n  this.authState = this.UNAUTHENTICATED;\n  this.signedAuthToken = null;\n  this.authToken = null;\n  this.pendingReconnect = false;\n  this.pendingReconnectTimeout = null;\n  this.preparingPendingSubscriptions = false;\n  this.clientId = opts.clientId;\n  this.connectTimeout = opts.connectTimeout;\n  this.ackTimeout = opts.ackTimeout;\n  this.channelPrefix = opts.channelPrefix || null;\n  this.disconnectOnUnload = opts.disconnectOnUnload == null ? true : opts.disconnectOnUnload;\n  this.authTokenName = opts.authTokenName; // pingTimeout will be ackTimeout at the start, but it will\n  // be updated with values provided by the 'connect' event\n\n  this.pingTimeout = this.ackTimeout;\n  this.pingTimeoutDisabled = !!opts.pingTimeoutDisabled;\n  this.active = true;\n  this._clientMap = opts.clientMap || {};\n  var maxTimeout = Math.pow(2, 31) - 1;\n\n  var verifyDuration = function (propertyName) {\n    if (self[propertyName] > maxTimeout) {\n      throw new InvalidArgumentsError('The ' + propertyName + ' value provided exceeded the maximum amount allowed');\n    }\n  };\n\n  verifyDuration('connectTimeout');\n  verifyDuration('ackTimeout');\n  this._localEvents = {\n    'connect': 1,\n    'connectAbort': 1,\n    'close': 1,\n    'disconnect': 1,\n    'message': 1,\n    'error': 1,\n    'raw': 1,\n    'kickOut': 1,\n    'subscribe': 1,\n    'unsubscribe': 1,\n    'subscribeStateChange': 1,\n    'authStateChange': 1,\n    'authenticate': 1,\n    'deauthenticate': 1,\n    'removeAuthToken': 1,\n    'subscribeRequest': 1\n  };\n  this.connectAttempts = 0;\n  this._emitBuffer = new LinkedList();\n  this.channels = {};\n  this.options = opts;\n  this._cid = 1;\n\n  this.options.callIdGenerator = function () {\n    return self._cid++;\n  };\n\n  if (this.options.autoReconnect) {\n    if (this.options.autoReconnectOptions == null) {\n      this.options.autoReconnectOptions = {};\n    } // Add properties to the this.options.autoReconnectOptions object.\n    // We assign the reference to a reconnectOptions variable to avoid repetition.\n\n\n    var reconnectOptions = this.options.autoReconnectOptions;\n\n    if (reconnectOptions.initialDelay == null) {\n      reconnectOptions.initialDelay = 10000;\n    }\n\n    if (reconnectOptions.randomness == null) {\n      reconnectOptions.randomness = 10000;\n    }\n\n    if (reconnectOptions.multiplier == null) {\n      reconnectOptions.multiplier = 1.5;\n    }\n\n    if (reconnectOptions.maxDelay == null) {\n      reconnectOptions.maxDelay = 60000;\n    }\n  }\n\n  if (this.options.subscriptionRetryOptions == null) {\n    this.options.subscriptionRetryOptions = {};\n  }\n\n  if (this.options.authEngine) {\n    this.auth = this.options.authEngine;\n  } else {\n    this.auth = new AuthEngine();\n  }\n\n  if (this.options.codecEngine) {\n    this.codec = this.options.codecEngine;\n  } else {\n    // Default codec engine\n    this.codec = formatter;\n  }\n\n  if (this.options.protocol) {\n    var protocolOptionError = new InvalidArgumentsError('The \"protocol\" option' + ' does not affect socketcluster-client. If you want to utilize SSL/TLS' + ' - use \"secure\" option instead');\n\n    this._onSCError(protocolOptionError);\n  }\n\n  this.options.path = this.options.path.replace(/\\/$/, '') + '/';\n  this.options.query = opts.query || {};\n\n  if (typeof this.options.query === 'string') {\n    this.options.query = querystring.parse(this.options.query);\n  }\n\n  this._channelEmitter = new Emitter();\n\n  this._unloadHandler = function () {\n    self.disconnect();\n  };\n\n  if (isBrowser && this.disconnectOnUnload && global.addEventListener) {\n    global.addEventListener('beforeunload', this._unloadHandler, false);\n  }\n\n  this._clientMap[this.clientId] = this;\n\n  if (this.options.autoConnect) {\n    this.connect();\n  }\n};\n\nSCClientSocket.prototype = Object.create(Emitter.prototype);\nSCClientSocket.CONNECTING = SCClientSocket.prototype.CONNECTING = SCTransport.prototype.CONNECTING;\nSCClientSocket.OPEN = SCClientSocket.prototype.OPEN = SCTransport.prototype.OPEN;\nSCClientSocket.CLOSED = SCClientSocket.prototype.CLOSED = SCTransport.prototype.CLOSED;\nSCClientSocket.AUTHENTICATED = SCClientSocket.prototype.AUTHENTICATED = 'authenticated';\nSCClientSocket.UNAUTHENTICATED = SCClientSocket.prototype.UNAUTHENTICATED = 'unauthenticated';\nSCClientSocket.PENDING = SCClientSocket.prototype.PENDING = 'pending';\nSCClientSocket.ignoreStatuses = scErrors.socketProtocolIgnoreStatuses;\nSCClientSocket.errorStatuses = scErrors.socketProtocolErrorStatuses;\nSCClientSocket.prototype._privateEventHandlerMap = {\n  '#publish': function (data) {\n    var undecoratedChannelName = this._undecorateChannelName(data.channel);\n\n    var isSubscribed = this.isSubscribed(undecoratedChannelName, true);\n\n    if (isSubscribed) {\n      this._channelEmitter.emit(undecoratedChannelName, data.data);\n    }\n  },\n  '#kickOut': function (data) {\n    var undecoratedChannelName = this._undecorateChannelName(data.channel);\n\n    var channel = this.channels[undecoratedChannelName];\n\n    if (channel) {\n      Emitter.prototype.emit.call(this, 'kickOut', data.message, undecoratedChannelName);\n      channel.emit('kickOut', data.message, undecoratedChannelName);\n\n      this._triggerChannelUnsubscribe(channel);\n    }\n  },\n  '#setAuthToken': function (data, response) {\n    var self = this;\n\n    if (data) {\n      var triggerAuthenticate = function (err) {\n        if (err) {\n          // This is a non-fatal error, we don't want to close the connection\n          // because of this but we do want to notify the server and throw an error\n          // on the client.\n          response.error(err);\n\n          self._onSCError(err);\n        } else {\n          self._changeToAuthenticatedState(data.token);\n\n          response.end();\n        }\n      };\n\n      this.auth.saveToken(this.authTokenName, data.token, {}, triggerAuthenticate);\n    } else {\n      response.error(new InvalidMessageError('No token data provided by #setAuthToken event'));\n    }\n  },\n  '#removeAuthToken': function (data, response) {\n    var self = this;\n    this.auth.removeToken(this.authTokenName, function (err, oldToken) {\n      if (err) {\n        // Non-fatal error - Do not close the connection\n        response.error(err);\n\n        self._onSCError(err);\n      } else {\n        Emitter.prototype.emit.call(self, 'removeAuthToken', oldToken);\n\n        self._changeToUnauthenticatedStateAndClearTokens();\n\n        response.end();\n      }\n    });\n  },\n  '#disconnect': function (data) {\n    this.transport.close(data.code, data.data);\n  }\n};\n\nSCClientSocket.prototype.getState = function () {\n  return this.state;\n};\n\nSCClientSocket.prototype.getBytesReceived = function () {\n  return this.transport.getBytesReceived();\n};\n\nSCClientSocket.prototype.deauthenticate = function (callback) {\n  var self = this;\n  this.auth.removeToken(this.authTokenName, function (err, oldToken) {\n    if (err) {\n      // Non-fatal error - Do not close the connection\n      self._onSCError(err);\n    } else {\n      Emitter.prototype.emit.call(self, 'removeAuthToken', oldToken);\n\n      if (self.state !== self.CLOSED) {\n        self.emit('#removeAuthToken');\n      }\n\n      self._changeToUnauthenticatedStateAndClearTokens();\n    }\n\n    callback && callback(err);\n  });\n};\n\nSCClientSocket.prototype.connect = SCClientSocket.prototype.open = function () {\n  var self = this;\n\n  if (!this.active) {\n    var error = new InvalidActionError('Cannot connect a destroyed client');\n\n    this._onSCError(error);\n\n    return;\n  }\n\n  if (this.state === this.CLOSED) {\n    this.pendingReconnect = false;\n    this.pendingReconnectTimeout = null;\n    clearTimeout(this._reconnectTimeoutRef);\n    this.state = this.CONNECTING;\n    Emitter.prototype.emit.call(this, 'connecting');\n\n    if (this.transport) {\n      this.transport.off();\n    }\n\n    this.transport = new SCTransport(this.auth, this.codec, this.options);\n    this.transport.on('open', function (status) {\n      self.state = self.OPEN;\n\n      self._onSCOpen(status);\n    });\n    this.transport.on('error', function (err) {\n      self._onSCError(err);\n    });\n    this.transport.on('close', function (code, data) {\n      self.state = self.CLOSED;\n\n      self._onSCClose(code, data);\n    });\n    this.transport.on('openAbort', function (code, data) {\n      self.state = self.CLOSED;\n\n      self._onSCClose(code, data, true);\n    });\n    this.transport.on('event', function (event, data, res) {\n      self._onSCEvent(event, data, res);\n    });\n  }\n};\n\nSCClientSocket.prototype.reconnect = function (code, data) {\n  this.disconnect(code, data);\n  this.connect();\n};\n\nSCClientSocket.prototype.disconnect = function (code, data) {\n  code = code || 1000;\n\n  if (typeof code !== 'number') {\n    throw new InvalidArgumentsError('If specified, the code argument must be a number');\n  }\n\n  if (this.state === this.OPEN || this.state === this.CONNECTING) {\n    this.transport.close(code, data);\n  } else {\n    this.pendingReconnect = false;\n    this.pendingReconnectTimeout = null;\n    clearTimeout(this._reconnectTimeoutRef);\n  }\n};\n\nSCClientSocket.prototype.destroy = function (code, data) {\n  if (isBrowser && global.removeEventListener) {\n    global.removeEventListener('beforeunload', this._unloadHandler, false);\n  }\n\n  this.active = false;\n  this.disconnect(code, data);\n  delete this._clientMap[this.clientId];\n};\n\nSCClientSocket.prototype._changeToUnauthenticatedStateAndClearTokens = function () {\n  if (this.authState !== this.UNAUTHENTICATED) {\n    var oldState = this.authState;\n    var oldSignedToken = this.signedAuthToken;\n    this.authState = this.UNAUTHENTICATED;\n    this.signedAuthToken = null;\n    this.authToken = null;\n    var stateChangeData = {\n      oldState: oldState,\n      newState: this.authState\n    };\n    Emitter.prototype.emit.call(this, 'authStateChange', stateChangeData);\n    Emitter.prototype.emit.call(this, 'deauthenticate', oldSignedToken);\n  }\n};\n\nSCClientSocket.prototype._changeToAuthenticatedState = function (signedAuthToken) {\n  this.signedAuthToken = signedAuthToken;\n  this.authToken = this._extractAuthTokenData(signedAuthToken);\n\n  if (this.authState !== this.AUTHENTICATED) {\n    var oldState = this.authState;\n    this.authState = this.AUTHENTICATED;\n    var stateChangeData = {\n      oldState: oldState,\n      newState: this.authState,\n      signedAuthToken: signedAuthToken,\n      authToken: this.authToken\n    };\n\n    if (!this.preparingPendingSubscriptions) {\n      this.processPendingSubscriptions();\n    }\n\n    Emitter.prototype.emit.call(this, 'authStateChange', stateChangeData);\n  }\n\n  Emitter.prototype.emit.call(this, 'authenticate', signedAuthToken);\n};\n\nSCClientSocket.prototype.decodeBase64 = function (encodedString) {\n  return Buffer.from(encodedString, 'base64').toString('utf8');\n};\n\nSCClientSocket.prototype.encodeBase64 = function (decodedString) {\n  return Buffer.from(decodedString, 'utf8').toString('base64');\n};\n\nSCClientSocket.prototype._extractAuthTokenData = function (signedAuthToken) {\n  var tokenParts = (signedAuthToken || '').split('.');\n  var encodedTokenData = tokenParts[1];\n\n  if (encodedTokenData != null) {\n    var tokenData = encodedTokenData;\n\n    try {\n      tokenData = this.decodeBase64(tokenData);\n      return JSON.parse(tokenData);\n    } catch (e) {\n      return tokenData;\n    }\n  }\n\n  return null;\n};\n\nSCClientSocket.prototype.getAuthToken = function () {\n  return this.authToken;\n};\n\nSCClientSocket.prototype.getSignedAuthToken = function () {\n  return this.signedAuthToken;\n}; // Perform client-initiated authentication by providing an encrypted token string.\n\n\nSCClientSocket.prototype.authenticate = function (signedAuthToken, callback) {\n  var self = this;\n  this.emit('#authenticate', signedAuthToken, function (err, authStatus) {\n    if (authStatus && authStatus.isAuthenticated != null) {\n      // If authStatus is correctly formatted (has an isAuthenticated property),\n      // then we will rehydrate the authError.\n      if (authStatus.authError) {\n        authStatus.authError = scErrors.hydrateError(authStatus.authError);\n      }\n    } else {\n      // Some errors like BadConnectionError and TimeoutError will not pass a valid\n      // authStatus object to the current function, so we need to create it ourselves.\n      authStatus = {\n        isAuthenticated: self.authState,\n        authError: null\n      };\n    }\n\n    if (err) {\n      if (err.name !== 'BadConnectionError' && err.name !== 'TimeoutError') {\n        // In case of a bad/closed connection or a timeout, we maintain the last\n        // known auth state since those errors don't mean that the token is invalid.\n        self._changeToUnauthenticatedStateAndClearTokens();\n      }\n\n      callback && callback(err, authStatus);\n    } else {\n      self.auth.saveToken(self.authTokenName, signedAuthToken, {}, function (err) {\n        if (err) {\n          self._onSCError(err);\n        }\n\n        if (authStatus.isAuthenticated) {\n          self._changeToAuthenticatedState(signedAuthToken);\n        } else {\n          self._changeToUnauthenticatedStateAndClearTokens();\n        }\n\n        callback && callback(err, authStatus);\n      });\n    }\n  });\n};\n\nSCClientSocket.prototype._tryReconnect = function (initialDelay) {\n  var self = this;\n  var exponent = this.connectAttempts++;\n  var reconnectOptions = this.options.autoReconnectOptions;\n  var timeout;\n\n  if (initialDelay == null || exponent > 0) {\n    var initialTimeout = Math.round(reconnectOptions.initialDelay + (reconnectOptions.randomness || 0) * Math.random());\n    timeout = Math.round(initialTimeout * Math.pow(reconnectOptions.multiplier, exponent));\n  } else {\n    timeout = initialDelay;\n  }\n\n  if (timeout > reconnectOptions.maxDelay) {\n    timeout = reconnectOptions.maxDelay;\n  }\n\n  clearTimeout(this._reconnectTimeoutRef);\n  this.pendingReconnect = true;\n  this.pendingReconnectTimeout = timeout;\n  this._reconnectTimeoutRef = setTimeout(function () {\n    self.connect();\n  }, timeout);\n};\n\nSCClientSocket.prototype._onSCOpen = function (status) {\n  var self = this;\n  this.preparingPendingSubscriptions = true;\n\n  if (status) {\n    this.id = status.id;\n    this.pingTimeout = status.pingTimeout;\n    this.transport.pingTimeout = this.pingTimeout;\n\n    if (status.isAuthenticated) {\n      this._changeToAuthenticatedState(status.authToken);\n    } else {\n      this._changeToUnauthenticatedStateAndClearTokens();\n    }\n  } else {\n    // This can happen if auth.loadToken (in sctransport.js) fails with\n    // an error - This means that the signedAuthToken cannot be loaded by\n    // the auth engine and therefore, we need to unauthenticate the client.\n    this._changeToUnauthenticatedStateAndClearTokens();\n  }\n\n  this.connectAttempts = 0;\n\n  if (this.options.autoSubscribeOnConnect) {\n    this.processPendingSubscriptions();\n  } // If the user invokes the callback while in autoSubscribeOnConnect mode, it\n  // won't break anything.\n\n\n  Emitter.prototype.emit.call(this, 'connect', status, function () {\n    self.processPendingSubscriptions();\n  });\n\n  if (this.state === this.OPEN) {\n    this._flushEmitBuffer();\n  }\n};\n\nSCClientSocket.prototype._onSCError = function (err) {\n  var self = this; // Throw error in different stack frame so that error handling\n  // cannot interfere with a reconnect action.\n\n  setTimeout(function () {\n    if (self.listeners('error').length < 1) {\n      throw err;\n    } else {\n      Emitter.prototype.emit.call(self, 'error', err);\n    }\n  }, 0);\n};\n\nSCClientSocket.prototype._suspendSubscriptions = function () {\n  var channel, newState;\n\n  for (var channelName in this.channels) {\n    if (this.channels.hasOwnProperty(channelName)) {\n      channel = this.channels[channelName];\n\n      if (channel.state === channel.SUBSCRIBED || channel.state === channel.PENDING) {\n        newState = channel.PENDING;\n      } else {\n        newState = channel.UNSUBSCRIBED;\n      }\n\n      this._triggerChannelUnsubscribe(channel, newState);\n    }\n  }\n};\n\nSCClientSocket.prototype._abortAllPendingEventsDueToBadConnection = function (failureType) {\n  var currentNode = this._emitBuffer.head;\n  var nextNode;\n\n  while (currentNode) {\n    nextNode = currentNode.next;\n    var eventObject = currentNode.data;\n    clearTimeout(eventObject.timeout);\n    delete eventObject.timeout;\n    currentNode.detach();\n    currentNode = nextNode;\n    var callback = eventObject.callback;\n\n    if (callback) {\n      delete eventObject.callback;\n      var errorMessage = \"Event '\" + eventObject.event + \"' was aborted due to a bad connection\";\n      var error = new BadConnectionError(errorMessage, failureType);\n      callback.call(eventObject, error, eventObject);\n    } // Cleanup any pending response callback in the transport layer too.\n\n\n    if (eventObject.cid) {\n      this.transport.cancelPendingResponse(eventObject.cid);\n    }\n  }\n};\n\nSCClientSocket.prototype._onSCClose = function (code, data, openAbort) {\n  var self = this;\n  this.id = null;\n\n  if (this.transport) {\n    this.transport.off();\n  }\n\n  this.pendingReconnect = false;\n  this.pendingReconnectTimeout = null;\n  clearTimeout(this._reconnectTimeoutRef);\n\n  this._suspendSubscriptions();\n\n  this._abortAllPendingEventsDueToBadConnection(openAbort ? 'connectAbort' : 'disconnect'); // Try to reconnect\n  // on server ping timeout (4000)\n  // or on client pong timeout (4001)\n  // or on close without status (1005)\n  // or on handshake failure (4003)\n  // or on handshake rejection (4008)\n  // or on socket hung up (1006)\n\n\n  if (this.options.autoReconnect) {\n    if (code === 4000 || code === 4001 || code === 1005) {\n      // If there is a ping or pong timeout or socket closes without\n      // status, don't wait before trying to reconnect - These could happen\n      // if the client wakes up after a period of inactivity and in this case we\n      // want to re-establish the connection as soon as possible.\n      this._tryReconnect(0); // Codes 4500 and above will be treated as permanent disconnects.\n      // Socket will not try to auto-reconnect.\n\n    } else if (code !== 1000 && code < 4500) {\n      this._tryReconnect();\n    }\n  }\n\n  if (openAbort) {\n    Emitter.prototype.emit.call(self, 'connectAbort', code, data);\n  } else {\n    Emitter.prototype.emit.call(self, 'disconnect', code, data);\n  }\n\n  Emitter.prototype.emit.call(self, 'close', code, data);\n\n  if (!SCClientSocket.ignoreStatuses[code]) {\n    var closeMessage;\n\n    if (data) {\n      closeMessage = 'Socket connection closed with status code ' + code + ' and reason: ' + data;\n    } else {\n      closeMessage = 'Socket connection closed with status code ' + code;\n    }\n\n    var err = new SocketProtocolError(SCClientSocket.errorStatuses[code] || closeMessage, code);\n\n    this._onSCError(err);\n  }\n};\n\nSCClientSocket.prototype._onSCEvent = function (event, data, res) {\n  var handler = this._privateEventHandlerMap[event];\n\n  if (handler) {\n    handler.call(this, data, res);\n  } else {\n    Emitter.prototype.emit.call(this, event, data, function () {\n      res && res.callback.apply(res, arguments);\n    });\n  }\n};\n\nSCClientSocket.prototype.decode = function (message) {\n  return this.transport.decode(message);\n};\n\nSCClientSocket.prototype.encode = function (object) {\n  return this.transport.encode(object);\n};\n\nSCClientSocket.prototype._flushEmitBuffer = function () {\n  var currentNode = this._emitBuffer.head;\n  var nextNode;\n\n  while (currentNode) {\n    nextNode = currentNode.next;\n    var eventObject = currentNode.data;\n    currentNode.detach();\n    this.transport.emitObject(eventObject);\n    currentNode = nextNode;\n  }\n};\n\nSCClientSocket.prototype._handleEventAckTimeout = function (eventObject, eventNode) {\n  if (eventNode) {\n    eventNode.detach();\n  }\n\n  delete eventObject.timeout;\n  var callback = eventObject.callback;\n\n  if (callback) {\n    delete eventObject.callback;\n    var error = new TimeoutError(\"Event response for '\" + eventObject.event + \"' timed out\");\n    callback.call(eventObject, error, eventObject);\n  } // Cleanup any pending response callback in the transport layer too.\n\n\n  if (eventObject.cid) {\n    this.transport.cancelPendingResponse(eventObject.cid);\n  }\n};\n\nSCClientSocket.prototype._emit = function (event, data, callback) {\n  var self = this;\n\n  if (this.state === this.CLOSED) {\n    this.connect();\n  }\n\n  var eventObject = {\n    event: event,\n    callback: callback\n  };\n  var eventNode = new LinkedList.Item();\n\n  if (this.options.cloneData) {\n    eventObject.data = clone(data);\n  } else {\n    eventObject.data = data;\n  }\n\n  eventNode.data = eventObject;\n  eventObject.timeout = setTimeout(function () {\n    self._handleEventAckTimeout(eventObject, eventNode);\n  }, this.ackTimeout);\n\n  this._emitBuffer.append(eventNode);\n\n  if (this.state === this.OPEN) {\n    this._flushEmitBuffer();\n  }\n};\n\nSCClientSocket.prototype.send = function (data) {\n  this.transport.send(data);\n};\n\nSCClientSocket.prototype.emit = function (event, data, callback) {\n  if (this._localEvents[event] == null) {\n    this._emit(event, data, callback);\n  } else if (event === 'error') {\n    Emitter.prototype.emit.call(this, event, data);\n  } else {\n    var error = new InvalidActionError('The \"' + event + '\" event is reserved and cannot be emitted on a client socket');\n\n    this._onSCError(error);\n  }\n};\n\nSCClientSocket.prototype.publish = function (channelName, data, callback) {\n  var pubData = {\n    channel: this._decorateChannelName(channelName),\n    data: data\n  };\n  this.emit('#publish', pubData, callback);\n};\n\nSCClientSocket.prototype._triggerChannelSubscribe = function (channel, subscriptionOptions) {\n  var channelName = channel.name;\n\n  if (channel.state !== channel.SUBSCRIBED) {\n    var oldState = channel.state;\n    channel.state = channel.SUBSCRIBED;\n    var stateChangeData = {\n      channel: channelName,\n      oldState: oldState,\n      newState: channel.state,\n      subscriptionOptions: subscriptionOptions\n    };\n    channel.emit('subscribeStateChange', stateChangeData);\n    channel.emit('subscribe', channelName, subscriptionOptions);\n    Emitter.prototype.emit.call(this, 'subscribeStateChange', stateChangeData);\n    Emitter.prototype.emit.call(this, 'subscribe', channelName, subscriptionOptions);\n  }\n};\n\nSCClientSocket.prototype._triggerChannelSubscribeFail = function (err, channel, subscriptionOptions) {\n  var channelName = channel.name;\n  var meetsAuthRequirements = !channel.waitForAuth || this.authState === this.AUTHENTICATED;\n\n  if (channel.state !== channel.UNSUBSCRIBED && meetsAuthRequirements) {\n    channel.state = channel.UNSUBSCRIBED;\n    channel.emit('subscribeFail', err, channelName, subscriptionOptions);\n    Emitter.prototype.emit.call(this, 'subscribeFail', err, channelName, subscriptionOptions);\n  }\n}; // Cancel any pending subscribe callback\n\n\nSCClientSocket.prototype._cancelPendingSubscribeCallback = function (channel) {\n  if (channel._pendingSubscriptionCid != null) {\n    this.transport.cancelPendingResponse(channel._pendingSubscriptionCid);\n    delete channel._pendingSubscriptionCid;\n  }\n};\n\nSCClientSocket.prototype._decorateChannelName = function (channelName) {\n  if (this.channelPrefix) {\n    channelName = this.channelPrefix + channelName;\n  }\n\n  return channelName;\n};\n\nSCClientSocket.prototype._undecorateChannelName = function (decoratedChannelName) {\n  if (this.channelPrefix && decoratedChannelName.indexOf(this.channelPrefix) === 0) {\n    return decoratedChannelName.replace(this.channelPrefix, '');\n  }\n\n  return decoratedChannelName;\n};\n\nSCClientSocket.prototype._trySubscribe = function (channel) {\n  var self = this;\n  var meetsAuthRequirements = !channel.waitForAuth || this.authState === this.AUTHENTICATED; // We can only ever have one pending subscribe action at any given time on a channel\n\n  if (this.state === this.OPEN && !this.preparingPendingSubscriptions && channel._pendingSubscriptionCid == null && meetsAuthRequirements) {\n    var options = {\n      noTimeout: true\n    };\n    var subscriptionOptions = {\n      channel: this._decorateChannelName(channel.name)\n    };\n\n    if (channel.waitForAuth) {\n      options.waitForAuth = true;\n      subscriptionOptions.waitForAuth = options.waitForAuth;\n    }\n\n    if (channel.data) {\n      subscriptionOptions.data = channel.data;\n    }\n\n    if (channel.batch) {\n      options.batch = true;\n      subscriptionOptions.batch = true;\n    }\n\n    channel._pendingSubscriptionCid = this.transport.emit('#subscribe', subscriptionOptions, options, function (err) {\n      delete channel._pendingSubscriptionCid;\n\n      if (err) {\n        self._triggerChannelSubscribeFail(err, channel, subscriptionOptions);\n      } else {\n        self._triggerChannelSubscribe(channel, subscriptionOptions);\n      }\n    });\n    Emitter.prototype.emit.call(this, 'subscribeRequest', channel.name, subscriptionOptions);\n  }\n};\n\nSCClientSocket.prototype.subscribe = function (channelName, options) {\n  var channel = this.channels[channelName];\n\n  if (!channel) {\n    channel = new SCChannel(channelName, this, options);\n    this.channels[channelName] = channel;\n  } else if (options) {\n    channel.setOptions(options);\n  }\n\n  if (channel.state === channel.UNSUBSCRIBED) {\n    channel.state = channel.PENDING;\n\n    this._trySubscribe(channel);\n  }\n\n  return channel;\n};\n\nSCClientSocket.prototype._triggerChannelUnsubscribe = function (channel, newState) {\n  var channelName = channel.name;\n  var oldState = channel.state;\n\n  if (newState) {\n    channel.state = newState;\n  } else {\n    channel.state = channel.UNSUBSCRIBED;\n  }\n\n  this._cancelPendingSubscribeCallback(channel);\n\n  if (oldState === channel.SUBSCRIBED) {\n    var stateChangeData = {\n      channel: channelName,\n      oldState: oldState,\n      newState: channel.state\n    };\n    channel.emit('subscribeStateChange', stateChangeData);\n    channel.emit('unsubscribe', channelName);\n    Emitter.prototype.emit.call(this, 'subscribeStateChange', stateChangeData);\n    Emitter.prototype.emit.call(this, 'unsubscribe', channelName);\n  }\n};\n\nSCClientSocket.prototype._tryUnsubscribe = function (channel) {\n  var self = this;\n\n  if (this.state === this.OPEN) {\n    var options = {\n      noTimeout: true\n    };\n\n    if (channel.batch) {\n      options.batch = true;\n    } // If there is a pending subscribe action, cancel the callback\n\n\n    this._cancelPendingSubscribeCallback(channel); // This operation cannot fail because the TCP protocol guarantees delivery\n    // so long as the connection remains open. If the connection closes,\n    // the server will automatically unsubscribe the client and thus complete\n    // the operation on the server side.\n\n\n    var decoratedChannelName = this._decorateChannelName(channel.name);\n\n    this.transport.emit('#unsubscribe', decoratedChannelName, options);\n  }\n};\n\nSCClientSocket.prototype.unsubscribe = function (channelName) {\n  var channel = this.channels[channelName];\n\n  if (channel) {\n    if (channel.state !== channel.UNSUBSCRIBED) {\n      this._triggerChannelUnsubscribe(channel);\n\n      this._tryUnsubscribe(channel);\n    }\n  }\n};\n\nSCClientSocket.prototype.channel = function (channelName, options) {\n  var currentChannel = this.channels[channelName];\n\n  if (!currentChannel) {\n    currentChannel = new SCChannel(channelName, this, options);\n    this.channels[channelName] = currentChannel;\n  }\n\n  return currentChannel;\n};\n\nSCClientSocket.prototype.destroyChannel = function (channelName) {\n  var channel = this.channels[channelName];\n\n  if (channel) {\n    channel.unwatch();\n    channel.unsubscribe();\n    delete this.channels[channelName];\n  }\n};\n\nSCClientSocket.prototype.subscriptions = function (includePending) {\n  var subs = [];\n  var channel, includeChannel;\n\n  for (var channelName in this.channels) {\n    if (this.channels.hasOwnProperty(channelName)) {\n      channel = this.channels[channelName];\n\n      if (includePending) {\n        includeChannel = channel && (channel.state === channel.SUBSCRIBED || channel.state === channel.PENDING);\n      } else {\n        includeChannel = channel && channel.state === channel.SUBSCRIBED;\n      }\n\n      if (includeChannel) {\n        subs.push(channelName);\n      }\n    }\n  }\n\n  return subs;\n};\n\nSCClientSocket.prototype.isSubscribed = function (channelName, includePending) {\n  var channel = this.channels[channelName];\n\n  if (includePending) {\n    return !!channel && (channel.state === channel.SUBSCRIBED || channel.state === channel.PENDING);\n  }\n\n  return !!channel && channel.state === channel.SUBSCRIBED;\n};\n\nSCClientSocket.prototype.processPendingSubscriptions = function () {\n  var self = this;\n  this.preparingPendingSubscriptions = false;\n  var pendingChannels = [];\n\n  for (var i in this.channels) {\n    if (this.channels.hasOwnProperty(i)) {\n      var channel = this.channels[i];\n\n      if (channel.state === channel.PENDING) {\n        pendingChannels.push(channel);\n      }\n    }\n  }\n\n  pendingChannels.sort(function (a, b) {\n    var ap = a.priority || 0;\n    var bp = b.priority || 0;\n\n    if (ap > bp) {\n      return -1;\n    }\n\n    if (ap < bp) {\n      return 1;\n    }\n\n    return 0;\n  });\n  pendingChannels.forEach(function (channel) {\n    self._trySubscribe(channel);\n  });\n};\n\nSCClientSocket.prototype.watch = function (channelName, handler) {\n  if (typeof handler !== 'function') {\n    throw new InvalidArgumentsError('No handler function was provided');\n  }\n\n  this._channelEmitter.on(channelName, handler);\n};\n\nSCClientSocket.prototype.unwatch = function (channelName, handler) {\n  if (handler) {\n    this._channelEmitter.removeListener(channelName, handler);\n  } else {\n    this._channelEmitter.removeAllListeners(channelName);\n  }\n};\n\nSCClientSocket.prototype.watchers = function (channelName) {\n  return this._channelEmitter.listeners(channelName);\n};\n\nmodule.exports = SCClientSocket;","map":null,"metadata":{},"sourceType":"script"}