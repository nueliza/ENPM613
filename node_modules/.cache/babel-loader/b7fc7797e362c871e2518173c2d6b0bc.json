{"ast":null,"code":"/**\n * Contains service handlers for all user account actions\n */\nimport * as actionTypes from \"./actionTypes\";\nimport Cookies from \"react-cookie\";\nconst baseUrl = \"https://get-sat-pro.herokuapp.com/api\";\nconst cookies = new Cookies();\n/**\n * loginUser communicates with the login API, and logs in the user. Also stores the JWT token in the local storage\n * @param {Object} user \n */\n\nexport function loginUser(user) {\n  return async dispatch => {\n    dispatch({\n      type: actionTypes.LOGIN_USER_STARTED\n    });\n    return fetch(\"\".concat(baseUrl, \"/login\"), {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      },\n      body: JSON.stringify(user)\n    }).then(response => response.json()).then(payload => {\n      if (payload.Status === 200) {\n        cookies.set(\"token\", payload.token);\n        localStorage.setItem(\"token\", payload.token);\n        dispatch({\n          type: actionTypes.LOGIN_USER_SUCESS,\n          payload: payload\n        });\n      } else {\n        dispatch({\n          type: actionTypes.LOGIN_USER_FAILED,\n          error: payload.message\n        });\n      }\n    });\n  };\n}\n/**\n * registerUser communicated with registerUser API, registers the user. \n * @param {Object} registerData \n */\n\nexport function registerUser(registerData) {\n  return async dispatch => {\n    dispatch({\n      type: actionTypes.REGISTERATION_STARTED\n    }); //TODO service call for register\n\n    const resp = await fetch(\"\".concat(baseUrl, \"/register\"), {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      },\n      body: JSON.stringify(registerData)\n    });\n    const payload = await resp.json();\n\n    if (payload.Status === 200) {\n      dispatch({\n        type: actionTypes.REGISTRATION_SUCCESS,\n        payload: payload.message\n      });\n    } else {\n      dispatch({\n        type: actionTypes.REGISTRATION_FAILED,\n        error: payload.message\n      });\n    }\n  };\n}\n/**\n * logoutUser communicates with the logout API and removes the JWT token from the local storage\n */\n\nexport function logoutUser() {\n  return async dispatch => {\n    dispatch({\n      type: actionTypes.LOGOUT_USER_STARTED\n    });\n    return fetch(\"\".concat(baseUrl, \"/logout\"), {\n      method: \"GET\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      }\n    }).then(response => response.json()).then(payload => {\n      if (payload.Status === 200) {\n        localStorage.removeItem(\"token\", payload.token);\n        dispatch({\n          type: actionTypes.LOGOUT_USER_SUCESS,\n          payload: payload.message\n        });\n      } else {\n        dispatch({\n          type: actionTypes.LOGOUT_USER_FAILED,\n          error: payload.message\n        });\n      }\n    });\n  };\n}\nexport function getModulesList(reqObject) {\n  console.log(\"HERE\", reqObject);\n  return async dispatch => {\n    dispatch({\n      type: actionTypes.GET_MODULE_LIST_STARTED\n    });\n    return fetch(\"\".concat(baseUrl, \"/get_modules\"), {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': \"Bearer \".concat(localStorage.getItem(\"token\"))\n      },\n      body: JSON.stringify(reqObject)\n    }).then(response => response.json()).then(payload => {\n      console.log(\"HERE\");\n\n      if (payload.Status === 200) {\n        dispatch({\n          type: actionTypes.GET_MODULE_LIST_SUCCESS,\n          payload: payload\n        });\n      } else {\n        dispatch({\n          type: actionTypes.GET_MODULE_LIST_FAILED,\n          error: payload.message\n        });\n      }\n    });\n  };\n}","map":{"version":3,"sources":["/Users/annuabraham/Documents/GitHub/ENPM613/client/src/actions/userHandler.js"],"names":["actionTypes","Cookies","baseUrl","cookies","loginUser","user","dispatch","type","LOGIN_USER_STARTED","fetch","method","headers","body","JSON","stringify","then","response","json","payload","Status","set","token","localStorage","setItem","LOGIN_USER_SUCESS","LOGIN_USER_FAILED","error","message","registerUser","registerData","REGISTERATION_STARTED","resp","REGISTRATION_SUCCESS","REGISTRATION_FAILED","logoutUser","LOGOUT_USER_STARTED","removeItem","LOGOUT_USER_SUCESS","LOGOUT_USER_FAILED","getModulesList","reqObject","console","log","GET_MODULE_LIST_STARTED","getItem","GET_MODULE_LIST_SUCCESS","GET_MODULE_LIST_FAILED"],"mappings":"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","sourcesContent":["/**\n * Contains service handlers for all user account actions\n */\n\nimport * as actionTypes from \"./actionTypes\";\nimport Cookies from \"react-cookie\";\n\nconst baseUrl = \"https://get-sat-pro.herokuapp.com/api\";\nconst cookies = new Cookies();\n\n/**\n * loginUser communicates with the login API, and logs in the user. Also stores the JWT token in the local storage\n * @param {Object} user \n */\nexport function loginUser(user) {\n    return async dispatch => {\n        dispatch({\n            type: actionTypes.LOGIN_USER_STARTED\n        });\n        return fetch(`${baseUrl}/login`,{\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json',\n            },\n            body: JSON.stringify(user)\n        })\n        .then(response => response.json())\n        .then(payload => {\n            if (payload.Status === 200) {\n                cookies.set(\"token\", payload.token);\n                localStorage.setItem(\"token\", payload.token);\n                dispatch({\n                    type: actionTypes.LOGIN_USER_SUCESS,\n                    payload: payload\n                });\n            }\n            else {\n                dispatch({\n                    type: actionTypes.LOGIN_USER_FAILED,\n                    error: payload.message\n                });\n            }\n        })\n    }\n  }\n\n/**\n * registerUser communicated with registerUser API, registers the user. \n * @param {Object} registerData \n */\nexport function registerUser(registerData) {\n    return async dispatch =>{\n        dispatch({\n            type: actionTypes.REGISTERATION_STARTED\n        });\n        //TODO service call for register\n        const resp = await fetch(`${baseUrl}/register`, {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            },\n            body: JSON.stringify(registerData)\n        });\n        const payload = await resp.json();\n        if (payload.Status === 200) {\n            dispatch({\n                type: actionTypes.REGISTRATION_SUCCESS,\n                payload: payload.message\n            });\n        }\n        else {\n            dispatch({\n                type: actionTypes.REGISTRATION_FAILED,\n                error: payload.message\n            });\n        }\n    }\n    \n}\n/**\n * logoutUser communicates with the logout API and removes the JWT token from the local storage\n */\nexport function logoutUser() {\n    return async dispatch => {\n        dispatch({\n            type: actionTypes.LOGOUT_USER_STARTED\n        });\n        return fetch(`${baseUrl}/logout`,{\n            method: \"GET\",\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json',\n            },\n        })\n        .then(response => response.json())\n        .then(payload => {\n            if (payload.Status === 200) {\n                localStorage.removeItem(\"token\", payload.token);\n                dispatch({\n                    type: actionTypes.LOGOUT_USER_SUCESS,\n                    payload: payload.message\n                });\n            }\n            else {\n                dispatch({\n                    type: actionTypes.LOGOUT_USER_FAILED,\n                    error: payload.message\n                });\n            }\n        })\n    }\n  }\n\n  export function getModulesList(reqObject) {\n      console.log(\"HERE\", reqObject)\n    return async dispatch => {\n        dispatch({\n            type: actionTypes.GET_MODULE_LIST_STARTED\n        })\n        return fetch(`${baseUrl}/get_modules`,{\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json',\n                'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n            },\n            body: JSON.stringify(reqObject)\n        })\n        .then(response => response.json())\n        .then(payload => {\n            console.log(\"HERE\")\n            if (payload.Status === 200) {\n                dispatch({\n                    type: actionTypes.GET_MODULE_LIST_SUCCESS,\n                    payload: payload\n                });\n            }\n            else {\n                dispatch({\n                    type: actionTypes.GET_MODULE_LIST_FAILED,\n                    error: payload.message\n                });\n            }\n        })\n    }\n  }\n\n"]},"metadata":{},"sourceType":"module"}