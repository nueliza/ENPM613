{"ast":null,"code":"var _jsxFileName = \"/Users/annuabraham/Documents/GitHub/ENPM613/client/src/components/toast/index.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Toast, ToastBody } from 'reactstrap';\nimport { resetToast } from \"../../actions\";\nimport { iconMapping } from \"../utils/iconsMapping.js\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nclass ToastContainer extends Component {\n  render() {\n    setTimeout(function () {\n      this.props.resetToast();\n    }.bind(this), 6000);\n    let icon = this.props.toastType === \"SUCCESS\" ? \"tick\" : \"cross\";\n    return this.props.toastMessage !== \"\" ? React.createElement(Toast, {\n      isOpen: this.props.showToast,\n      className: this.props.toastType === \"SUCCESS\" ? \" success \" : \" failure \",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14\n      },\n      __self: this\n    }, React.createElement(ToastBody, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }, React.createElement(FontAwesomeIcon, {\n      color: \"white\",\n      icon: iconMapping[icon],\n      \"data-tip\": true,\n      \"data-for\": \"Exams\",\n      size: \"1x\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    }), \" \\xA0\", this.props.toastMessage)) : \"\";\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    resetToast: () => dispatch(resetToast())\n  };\n};\n\nconst mapStateToProps = state => {\n  return {\n    toastMessage: state.toast.toastMessage,\n    toastType: state.toast.toastType\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ToastContainer);","map":{"version":3,"sources":["/Users/annuabraham/Documents/GitHub/ENPM613/client/src/components/toast/index.js"],"names":["React","Component","connect","Toast","ToastBody","resetToast","iconMapping","FontAwesomeIcon","ToastContainer","render","setTimeout","props","bind","icon","toastType","toastMessage","showToast","mapDispatchToProps","dispatch","mapStateToProps","state","toast"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,KAAT,EAAgBC,SAAhB,QAAiC,YAAjC;AACA,SAASC,UAAT,QAA2B,eAA3B;AACA,SAASC,WAAT,QAA4B,0BAA5B;AACA,SAASC,eAAT,QAAgC,gCAAhC;;AAEA,MAAMC,cAAN,SAA6BP,SAA7B,CAAuC;AACnCQ,EAAAA,MAAM,GAAG;AACLC,IAAAA,UAAU,CAAC,YAAU;AAAE,WAAKC,KAAL,CAAWN,UAAX;AAAyB,KAArC,CAAsCO,IAAtC,CAA2C,IAA3C,CAAD,EAAkD,IAAlD,CAAV;AACA,QAAIC,IAAI,GAAG,KAAKF,KAAL,CAAWG,SAAX,KAAyB,SAAzB,GAAoC,MAApC,GAA4C,OAAvD;AACA,WACI,KAAKH,KAAL,CAAWI,YAAX,KAA4B,EAA5B,GACA,oBAAC,KAAD;AAAO,MAAA,MAAM,EAAE,KAAKJ,KAAL,CAAWK,SAA1B;AAAqC,MAAA,SAAS,EAAE,KAAKL,KAAL,CAAWG,SAAX,KAAyB,SAAzB,GAAoC,WAApC,GAAkD,WAAlG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA,oBAAC,eAAD;AAAiB,MAAA,KAAK,EAAC,OAAvB;AAA+B,MAAA,IAAI,EAAER,WAAW,CAACO,IAAD,CAAhD;AAAwD,sBAAxD;AAAiE,kBAAS,OAA1E;AAAkF,MAAA,IAAI,EAAC,IAAvF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,WAEC,KAAKF,KAAL,CAAWI,YAFZ,CADJ,CADA,GAOC,EARL;AAUH;;AAdkC;;AAgBvC,MAAME,kBAAkB,GAAIC,QAAD,IAAc;AACrC,SAAM;AACFb,IAAAA,UAAU,EAAE,MAAMa,QAAQ,CAACb,UAAU,EAAX;AADxB,GAAN;AAGH,CAJD;;AAMA,MAAMc,eAAe,GAAIC,KAAF,IAAW;AAC9B,SAAM;AACFL,IAAAA,YAAY,EAAEK,KAAK,CAACC,KAAN,CAAYN,YADxB;AAEFD,IAAAA,SAAS,EAAEM,KAAK,CAACC,KAAN,CAAYP;AAFrB,GAAN;AAIH,CALD;;AAOA,eAAeZ,OAAO,CAAEiB,eAAF,EAAmBF,kBAAnB,CAAP,CAA8CT,cAA9C,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Toast, ToastBody } from 'reactstrap';\nimport { resetToast } from \"../../actions\";\nimport { iconMapping } from \"../utils/iconsMapping.js\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nclass ToastContainer extends Component {\n    render() {\n        setTimeout(function(){ this.props.resetToast();}.bind(this),6000);\n        let icon = this.props.toastType === \"SUCCESS\"? \"tick\": \"cross\";\n        return (\n            this.props.toastMessage !== \"\"?\n            <Toast isOpen={this.props.showToast} className={this.props.toastType === \"SUCCESS\"? \" success \" : \" failure \"}>\n                <ToastBody>\n                <FontAwesomeIcon color=\"white\" icon={iconMapping[icon]} data-tip data-for='Exams' size=\"1x\" /> &nbsp;\n                {this.props.toastMessage}\n                </ToastBody>\n            </Toast>\n            :\"\"\n        )\n    }\n}\nconst mapDispatchToProps = (dispatch) => {\n    return{\n        resetToast: () => dispatch(resetToast())\n    }\n}\n\nconst mapStateToProps =( state) =>{\n    return{\n        toastMessage: state.toast.toastMessage,\n        toastType: state.toast.toastType\n    }\n}\n    \nexport default connect( mapStateToProps, mapDispatchToProps)(ToastContainer)"]},"metadata":{},"sourceType":"module"}